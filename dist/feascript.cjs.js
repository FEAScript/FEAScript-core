"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class e{constructor({meshDimension:e,elementOrder:t}){this.meshDimension=e,this.elementOrder=t}getGaussPointsAndWeights(){let e=[],t=[];return"linear"===this.elementOrder?(e[0]=.5,t[0]=1):"quadratic"===this.elementOrder&&(e[0]=(1-Math.sqrt(.6))/2,e[1]=.5,e[2]=(1+Math.sqrt(.6))/2,t[0]=5/18,t[1]=8/18,t[2]=5/18),{gaussPoints:e,gaussWeights:t}}}let t="basic";function n(e){"debug"===t&&console.log("%c[DEBUG] "+e,"color: #2196F3; font-weight: bold;")}function s(e){console.log("%c[INFO] "+e,"color: #4CAF50; font-weight: bold;")}function o(e){console.log("%c[ERROR] "+e,"color: #F44336; font-weight: bold;")}class i{constructor({meshDimension:e,elementOrder:t}){this.meshDimension=e,this.elementOrder=t}getBasisFunctions(e,t=null){let n=[],s=[],i=[];if("1D"===this.meshDimension)"linear"===this.elementOrder?(n[0]=1-e,n[1]=e,s[0]=-1,s[1]=1):"quadratic"===this.elementOrder&&(n[0]=1-3*e+2*e**2,n[1]=4*e-4*e**2,n[2]=2*e**2-e,s[0]=4*e-3,s[1]=4-8*e,s[2]=4*e-1);else if("2D"===this.meshDimension){if(null===t)return void o("Eta coordinate is required for 2D elements");if("linear"===this.elementOrder){function r(e){return 1-e}n[0]=r(e)*r(t),n[1]=r(e)*t,n[2]=e*r(t),n[3]=e*t,s[0]=-1*r(t),s[1]=-1*t,s[2]=1*r(t),s[3]=1*t,i[0]=-1*r(e),i[1]=1*r(e),i[2]=-1*e,i[3]=1*e}else if("quadratic"===this.elementOrder){function a(e){return 2*e**2-3*e+1}function l(e){return-4*e**2+4*e}function d(e){return 2*e**2-e}function h(e){return 4*e-3}function m(e){return-8*e+4}function u(e){return 4*e-1}n[0]=a(e)*a(t),n[1]=a(e)*l(t),n[2]=a(e)*d(t),n[3]=l(e)*a(t),n[4]=l(e)*l(t),n[5]=l(e)*d(t),n[6]=d(e)*a(t),n[7]=d(e)*l(t),n[8]=d(e)*d(t),s[0]=h(e)*a(t),s[1]=h(e)*l(t),s[2]=h(e)*d(t),s[3]=m(e)*a(t),s[4]=m(e)*l(t),s[5]=m(e)*d(t),s[6]=u(e)*a(t),s[7]=u(e)*l(t),s[8]=u(e)*d(t),i[0]=a(e)*h(t),i[1]=a(e)*m(t),i[2]=a(e)*u(t),i[3]=l(e)*h(t),i[4]=l(e)*m(t),i[5]=l(e)*u(t),i[6]=d(e)*h(t),i[7]=d(e)*m(t),i[8]=d(e)*u(t)}}return{basisFunction:n,basisFunctionDerivKsi:s,basisFunctionDerivEta:i}}}class r{constructor({numElementsX:e=null,maxX:t=null,numElementsY:n=null,maxY:s=null,meshDimension:o=null,elementOrder:i="linear",parsedMesh:r=null}){this.numElementsX=e,this.numElementsY=n,this.maxX=t,this.maxY=s,this.meshDimension=o,this.elementOrder=i,this.parsedMesh=r}generateMesh(){if(this.parsedMesh){if(this.parsedMesh.nodalNumbering&&"object"==typeof this.parsedMesh.nodalNumbering&&!Array.isArray(this.parsedMesh.nodalNumbering)){const e=this.parsedMesh.nodalNumbering.quadElements||[];if(this.parsedMesh.nodalNumbering.triangleElements,n("Initial parsed mesh nodal numbering from GMSH format: "+JSON.stringify(this.parsedMesh.nodalNumbering)),this.parsedMesh.elementTypes[3]||this.parsedMesh.elementTypes[10]){const t=[];for(let n=0;n<e.length;n++){const s=e[n],o=new Array(s.length);4===s.length?(o[0]=s[0],o[1]=s[3],o[2]=s[1],o[3]=s[2]):9===s.length&&(o[0]=s[0],o[1]=s[7],o[2]=s[3],o[3]=s[4],o[4]=s[8],o[5]=s[6],o[6]=s[1],o[7]=s[5],o[8]=s[2]),t.push(o)}this.parsedMesh.nodalNumbering=t}else this.parsedMesh.elementTypes[2];if(n("Nodal numbering after mapping from GMSH to FEAScript format: "+JSON.stringify(this.parsedMesh.nodalNumbering)),this.parsedMesh.physicalPropMap&&this.parsedMesh.boundaryElements){if(Array.isArray(this.parsedMesh.boundaryElements)&&this.parsedMesh.boundaryElements.length>0&&void 0===this.parsedMesh.boundaryElements[0]){const e=[];for(let t=1;t<this.parsedMesh.boundaryElements.length;t++)this.parsedMesh.boundaryElements[t]&&e.push(this.parsedMesh.boundaryElements[t]);this.parsedMesh.boundaryElements=e}if(this.parsedMesh.boundaryNodePairs&&!this.parsedMesh.boundaryElementsProcessed&&(this.parsedMesh.boundaryElements=[],this.parsedMesh.physicalPropMap.forEach((e=>{if(1===e.dimension){const t=this.parsedMesh.boundaryNodePairs[e.tag]||[];t.length>0&&(this.parsedMesh.boundaryElements[e.tag]||(this.parsedMesh.boundaryElements[e.tag]=[]),t.forEach((t=>{const s=t[0],i=t[1];n(`Processing boundary node pair: [${s}, ${i}] for boundary ${e.tag} (${e.name||"unnamed"})`);let r=!1;for(let t=0;t<this.parsedMesh.nodalNumbering.length;t++){const o=this.parsedMesh.nodalNumbering[t];if(4===o.length){if(o.includes(s)&&o.includes(i)){let a;const l=o.indexOf(s),d=o.indexOf(i);n(`  Found element ${t} containing boundary nodes. Element nodes: [${o.join(", ")}]`),n(`  Node ${s} is at index ${l}, Node ${i} is at index ${d} in the element`),0===l&&2===d||2===l&&0===d?(a=0,n(`  These nodes form the BOTTOM side (${a}) of element ${t}`)):0===l&&1===d||1===l&&0===d?(a=1,n(`  These nodes form the LEFT side (${a}) of element ${t}`)):1===l&&3===d||3===l&&1===d?(a=2,n(`  These nodes form the TOP side (${a}) of element ${t}`)):(2===l&&3===d||3===l&&2===d)&&(a=3,n(`  These nodes form the RIGHT side (${a}) of element ${t}`)),this.parsedMesh.boundaryElements[e.tag].push([t,a]),n(`  Added element-side pair [${t}, ${a}] to boundary tag ${e.tag}`),r=!0;break}}else if(9===o.length&&o.includes(s)&&o.includes(i)){let a;const l=o.indexOf(s),d=o.indexOf(i);n(`  Found element ${t} containing boundary nodes. Element nodes: [${o.join(", ")}]`),n(`  Node ${s} is at index ${l}, Node ${i} is at index ${d} in the element`),0===l&&6===d||6===l&&0===d||0===l&&3===d||3===l&&0===d||3===l&&6===d||6===l&&3===d?(a=0,n(`  These nodes form the BOTTOM side (${a}) of element ${t}`)):0===l&&2===d||2===l&&0===d||0===l&&1===d||1===l&&0===d||1===l&&2===d||2===l&&1===d?(a=1,n(`  These nodes form the LEFT side (${a}) of element ${t}`)):2===l&&8===d||8===l&&2===d||2===l&&5===d||5===l&&2===d||5===l&&8===d||8===l&&5===d?(a=2,n(`  These nodes form the TOP side (${a}) of element ${t}`)):(6===l&&8===d||8===l&&6===d||6===l&&7===d||7===l&&6===d||7===l&&8===d||8===l&&7===d)&&(a=3,n(`  These nodes form the RIGHT side (${a}) of element ${t}`)),this.parsedMesh.boundaryElements[e.tag].push([t,a]),n(`  Added element-side pair [${t}, ${a}] to boundary tag ${e.tag}`),r=!0;break}}r||o(`Could not find element containing boundary nodes ${s} and ${i}. Boundary may be incomplete.`)})))}})),this.parsedMesh.boundaryElementsProcessed=!0,this.parsedMesh.boundaryElements.length>0&&void 0===this.parsedMesh.boundaryElements[0])){const e=[];for(let t=1;t<this.parsedMesh.boundaryElements.length;t++)this.parsedMesh.boundaryElements[t]&&e.push(this.parsedMesh.boundaryElements[t]);this.parsedMesh.boundaryElements=e}}}return n("Processed boundary elements by tag: "+JSON.stringify(this.parsedMesh.boundaryElements)),this.parsedMesh}return"1D"===this.meshDimension?null!==this.numElementsX&&null!==this.maxX||o("numElementsX and maxX are required parameters when generating a 1D mesh from geometry"):"2D"===this.meshDimension&&(null!==this.numElementsX&&null!==this.maxX&&null!==this.numElementsY&&null!==this.maxY||o("numElementsX, maxX, numElementsY, and maxY are required parameters when generating a 2D mesh from geometry")),this.generateMeshFromGeometry()}generateMeshFromGeometry(){let e=[],t=[];let s,o,i,r;if("1D"===this.meshDimension){if("linear"===this.elementOrder){s=this.numElementsX+1,i=(this.maxX-0)/this.numElementsX,e[0]=0;for(let t=1;t<s;t++)e[t]=e[t-1]+i}else if("quadratic"===this.elementOrder){s=2*this.numElementsX+1,i=(this.maxX-0)/this.numElementsX,e[0]=0;for(let t=1;t<s;t++)e[t]=e[t-1]+i/2}const t=this.generateNodalNumbering(this.numElementsX,null,s,null,this.elementOrder),o=this.findBoundaryElements();return n("Generated node X coordinates: "+JSON.stringify(e)),{nodesXCoordinates:e,totalNodesX:s,nodalNumbering:t,boundaryElements:o}}if("2D"===this.meshDimension){if("linear"===this.elementOrder){s=this.numElementsX+1,o=this.numElementsY+1,i=(this.maxX-0)/this.numElementsX,r=(this.maxY-0)/this.numElementsY,e[0]=0,t[0]=0;for(let n=1;n<o;n++)e[n]=e[0],t[n]=t[0]+n*r;for(let n=1;n<s;n++){const s=n*o;e[s]=e[0]+n*i,t[s]=t[0];for(let n=1;n<o;n++)e[s+n]=e[s],t[s+n]=t[s]+n*r}}else if("quadratic"===this.elementOrder){s=2*this.numElementsX+1,o=2*this.numElementsY+1,i=(this.maxX-0)/this.numElementsX,r=(this.maxY-0)/this.numElementsY,e[0]=0,t[0]=0;for(let n=1;n<o;n++)e[n]=e[0],t[n]=t[0]+n*r/2;for(let n=1;n<s;n++){const s=n*o;e[s]=e[0]+n*i/2,t[s]=t[0];for(let n=1;n<o;n++)e[s+n]=e[s],t[s+n]=t[s]+n*r/2}}const a=this.generateNodalNumbering(this.numElementsX,this.numElementsY,s,o,this.elementOrder),l=this.findBoundaryElements();return n("Generated node X coordinates: "+JSON.stringify(e)),n("Generated node Y coordinates: "+JSON.stringify(t)),{nodesXCoordinates:e,nodesYCoordinates:t,totalNodesX:s,totalNodesY:o,nodalNumbering:a,boundaryElements:l}}}findBoundaryElements(){const e=[],t="1D"===this.meshDimension?2:4;for(let n=0;n<t;n++)e.push([]);if("1D"===this.meshDimension)e[0].push([0,0]),e[1].push([this.numElementsX-1,1]);else if("2D"===this.meshDimension)for(let t=0;t<this.numElementsX;t++)for(let n=0;n<this.numElementsY;n++){const s=t*this.numElementsY+n;0===n&&e[0].push([s,0]),0===t&&e[1].push([s,1]),n===this.numElementsY-1&&e[2].push([s,2]),t===this.numElementsX-1&&e[3].push([s,3])}return n("Identified boundary elements by side: "+JSON.stringify(e)),e}generateNodalNumbering(e,t,n,s,o){let i=0,r=[];if("1D"===this.meshDimension){if("linear"===o)for(let t=0;t<e;t++){r[t]=[];for(let e=1;e<=2;e++)r[t][e-1]=t+e}else if("quadratic"===o){let t=0;for(let n=0;n<e;n++){r[n]=[];for(let e=1;e<=3;e++)r[n][e-1]=n+e+t;t+=1}}}else if("2D"===this.meshDimension)if("linear"===o){let n=0,s=2;for(let o=0;o<e*t;o++)n+=1,r[o]=[],r[o][0]=o+s-1,r[o][1]=o+s,r[o][2]=o+s+t,r[o][3]=o+s+t+1,n===t&&(s+=1,n=0)}else if("quadratic"===o)for(let n=1;n<=e;n++)for(let e=1;e<=t;e++){r[i]=[];for(let t=1;t<=3;t++){let o=3*t-2;r[i][o-1]=s*(2*n+t-3)+2*e-1,r[i][o]=r[i][o-1]+1,r[i][o+1]=r[i][o-1]+2}i+=1}return r}}class a{constructor(e,t,n,s,o){this.boundaryConditions=e,this.boundaryElements=t,this.nop=n,this.meshDimension=s,this.elementOrder=o}imposeConstantTempBoundaryConditions(e,t){s("Applying constant temperature boundary conditions (Dirichlet type)"),"1D"===this.meshDimension?Object.keys(this.boundaryConditions).forEach((s=>{if("constantTemp"===this.boundaryConditions[s][0]){const o=this.boundaryConditions[s][1];n(`Boundary ${s}: Applying constant temperature of ${o} K (Dirichlet condition)`),this.boundaryElements[s].forEach((([s,i])=>{if("linear"===this.elementOrder){({0:[0],1:[1]})[i].forEach((i=>{const r=this.nop[s][i]-1;n(`  - Applied fixed temperature to node ${r+1} (element ${s+1}, local node ${i+1})`),e[r]=o;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}else if("quadratic"===this.elementOrder){({0:[0],2:[2]})[i].forEach((i=>{const r=this.nop[s][i]-1;n(`  - Applied fixed temperature to node ${r+1} (element ${s+1}, local node ${i+1})`),e[r]=o;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}}))}})):"2D"===this.meshDimension&&Object.keys(this.boundaryConditions).forEach((s=>{if("constantTemp"===this.boundaryConditions[s][0]){const o=this.boundaryConditions[s][1];n(`Boundary ${s}: Applying constant temperature of ${o} K (Dirichlet condition)`),this.boundaryElements[s].forEach((([s,i])=>{if("linear"===this.elementOrder){({0:[0,2],1:[0,1],2:[1,3],3:[2,3]})[i].forEach((i=>{const r=this.nop[s][i]-1;n(`  - Applied fixed temperature to node ${r+1} (element ${s+1}, local node ${i+1})`),e[r]=o;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}else if("quadratic"===this.elementOrder){({0:[0,3,6],1:[0,1,2],2:[2,5,8],3:[6,7,8]})[i].forEach((i=>{const r=this.nop[s][i]-1;n(`  - Applied fixed temperature to node ${r+1} (element ${s+1}, local node ${i+1})`),e[r]=o;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}}))}}))}imposeConvectionBoundaryConditions(e,t,o,i,r,a,l){s("Applying convection boundary conditions (Robin type)");let d=[],h=[];Object.keys(this.boundaryConditions).forEach((e=>{const t=this.boundaryConditions[e];"convection"===t[0]&&(d[e]=t[1],h[e]=t[2])})),"1D"===this.meshDimension?Object.keys(this.boundaryConditions).forEach((s=>{if("convection"===this.boundaryConditions[s][0]){const o=d[s],i=h[s];n(`Boundary ${s}: Applying convection with heat transfer coefficient h=${o} W/(m²·K) and external temperature T∞=${i} K`),this.boundaryElements[s].forEach((([s,r])=>{let a;"linear"===this.elementOrder?a=0===r?0:1:"quadratic"===this.elementOrder&&(a=0===r?0:2);const l=this.nop[s][a]-1;n(`  - Applied convection boundary condition to node ${l+1} (element ${s+1}, local node ${a+1})`),e[l]+=-o*i,t[l][l]+=o}))}})):"2D"===this.meshDimension&&Object.keys(this.boundaryConditions).forEach((s=>{if("convection"===this.boundaryConditions[s][0]){const m=d[s],u=h[s];n(`Boundary ${s}: Applying convection with heat transfer coefficient h=${m} W/(m²·K) and external temperature T∞=${u} K`),this.boundaryElements[s].forEach((([s,d])=>{if("linear"===this.elementOrder){let h,c,f,p,y;0===d?(h=o[0],c=0,f=0,p=3,y=2):1===d?(h=0,c=o[0],f=0,p=2,y=1):2===d?(h=o[0],c=1,f=1,p=4,y=2):3===d&&(h=1,c=o[0],f=2,p=4,y=1);let g=l.getBasisFunctions(h,c),b=g.basisFunction,E=g.basisFunctionDerivKsi,M=g.basisFunctionDerivEta,$=0,v=0,w=0,C=0;const N=this.nop[s].length;for(let e=0;e<N;e++){const t=this.nop[s][e]-1;0===d||2===d?($+=r[t]*E[e],v+=a[t]*E[e]):1!==d&&3!==d||(w+=r[t]*M[e],C+=a[t]*M[e])}const S=0===d||2===d?Math.sqrt($**2+v**2):Math.sqrt(w**2+C**2);for(let o=f;o<p;o+=y){let r=this.nop[s][o]-1;n(`  - Applied convection boundary condition to node ${r+1} (element ${s+1}, local node ${o+1})`),e[r]+=-i[0]*S*b[o]*m*u;for(let e=f;e<p;e+=y){let n=this.nop[s][e]-1;t[r][n]+=-i[0]*S*b[o]*b[e]*m}}}else if("quadratic"===this.elementOrder)for(let h=0;h<3;h++){let c,f,p,y,g;0===d?(c=o[h],f=0,p=0,y=7,g=3):1===d?(c=0,f=o[h],p=0,y=3,g=1):2===d?(c=o[h],f=1,p=2,y=9,g=3):3===d&&(c=1,f=o[h],p=6,y=9,g=1);let b=l.getBasisFunctions(c,f),E=b.basisFunction,M=b.basisFunctionDerivKsi,$=b.basisFunctionDerivEta,v=0,w=0,C=0,N=0;const S=this.nop[s].length;for(let e=0;e<S;e++){const t=this.nop[s][e]-1;0===d||2===d?(v+=r[t]*M[e],w+=a[t]*M[e]):1!==d&&3!==d||(C+=r[t]*$[e],N+=a[t]*$[e])}const x=0===d||2===d?Math.sqrt(v**2+w**2):Math.sqrt(C**2+N**2);for(let o=p;o<y;o+=g){let r=this.nop[s][o]-1;n(`  - Applied convection boundary condition to node ${r+1} (element ${s+1}, local node ${o+1})`),e[r]+=-i[h]*x*E[o]*m*u;for(let e=p;e<y;e+=g){let n=this.nop[s][e]-1;t[r][n]+=-i[h]*x*E[o]*E[e]*m}}}}))}}))}}
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const l=Symbol("Comlink.proxy"),d=Symbol("Comlink.endpoint"),h=Symbol("Comlink.releaseProxy"),m=Symbol("Comlink.finalizer"),u=Symbol("Comlink.thrown"),c=e=>"object"==typeof e&&null!==e||"function"==typeof e,f=new Map([["proxy",{canHandle:e=>c(e)&&e[l],serialize(e){const{port1:t,port2:n}=new MessageChannel;return p(e,t),[n,[n]]},deserialize:e=>(e.start(),g(e))}],["throw",{canHandle:e=>c(e)&&u in e,serialize({value:e}){let t;return t=e instanceof Error?{isError:!0,value:{message:e.message,name:e.name,stack:e.stack}}:{isError:!1,value:e},[t,[]]},deserialize(e){if(e.isError)throw Object.assign(new Error(e.value.message),e.value);throw e.value}}]]);function p(e,t=globalThis,n=["*"]){t.addEventListener("message",(function s(o){if(!o||!o.data)return;if(!function(e,t){for(const n of e){if(t===n||"*"===n)return!0;if(n instanceof RegExp&&n.test(t))return!0}return!1}(n,o.origin))return void console.warn(`Invalid origin '${o.origin}' for comlink proxy`);const{id:i,type:r,path:a}=Object.assign({path:[]},o.data),d=(o.data.argumentList||[]).map(S);let h;try{const t=a.slice(0,-1).reduce(((e,t)=>e[t]),e),n=a.reduce(((e,t)=>e[t]),e);switch(r){case"GET":h=n;break;case"SET":t[a.slice(-1)[0]]=S(o.data.value),h=!0;break;case"APPLY":h=n.apply(t,d);break;case"CONSTRUCT":h=function(e){return Object.assign(e,{[l]:!0})}(new n(...d));break;case"ENDPOINT":{const{port1:t,port2:n}=new MessageChannel;p(e,n),h=function(e,t){return C.set(e,t),e}(t,[t])}break;case"RELEASE":h=void 0;break;default:return}}catch(e){h={value:e,[u]:0}}Promise.resolve(h).catch((e=>({value:e,[u]:0}))).then((n=>{const[o,a]=N(n);t.postMessage(Object.assign(Object.assign({},o),{id:i}),a),"RELEASE"===r&&(t.removeEventListener("message",s),y(t),m in e&&"function"==typeof e[m]&&e[m]())})).catch((e=>{const[n,s]=N({value:new TypeError("Unserializable return value"),[u]:0});t.postMessage(Object.assign(Object.assign({},n),{id:i}),s)}))})),t.start&&t.start()}function y(e){(function(e){return"MessagePort"===e.constructor.name})(e)&&e.close()}function g(e,t){const n=new Map;return e.addEventListener("message",(function(e){const{data:t}=e;if(!t||!t.id)return;const s=n.get(t.id);if(s)try{s(t)}finally{n.delete(t.id)}})),v(e,n,[],t)}function b(e){if(e)throw new Error("Proxy has been released and is not useable")}function E(e){return x(e,new Map,{type:"RELEASE"}).then((()=>{y(e)}))}const M=new WeakMap,$="FinalizationRegistry"in globalThis&&new FinalizationRegistry((e=>{const t=(M.get(e)||0)-1;M.set(e,t),0===t&&E(e)}));function v(e,t,n=[],s=function(){}){let o=!1;const i=new Proxy(s,{get(s,r){if(b(o),r===h)return()=>{!function(e){$&&$.unregister(e)}(i),E(e),t.clear(),o=!0};if("then"===r){if(0===n.length)return{then:()=>i};const s=x(e,t,{type:"GET",path:n.map((e=>e.toString()))}).then(S);return s.then.bind(s)}return v(e,t,[...n,r])},set(s,i,r){b(o);const[a,l]=N(r);return x(e,t,{type:"SET",path:[...n,i].map((e=>e.toString())),value:a},l).then(S)},apply(s,i,r){b(o);const a=n[n.length-1];if(a===d)return x(e,t,{type:"ENDPOINT"}).then(S);if("bind"===a)return v(e,t,n.slice(0,-1));const[l,h]=w(r);return x(e,t,{type:"APPLY",path:n.map((e=>e.toString())),argumentList:l},h).then(S)},construct(s,i){b(o);const[r,a]=w(i);return x(e,t,{type:"CONSTRUCT",path:n.map((e=>e.toString())),argumentList:r},a).then(S)}});return function(e,t){const n=(M.get(t)||0)+1;M.set(t,n),$&&$.register(e,t,e)}(i,e),i}function w(e){const t=e.map(N);return[t.map((e=>e[0])),(n=t.map((e=>e[1])),Array.prototype.concat.apply([],n))];var n}const C=new WeakMap;function N(e){for(const[t,n]of f)if(n.canHandle(e)){const[s,o]=n.serialize(e);return[{type:"HANDLER",name:t,value:s},o]}return[{type:"RAW",value:e},C.get(e)||[]]}function S(e){switch(e.type){case"HANDLER":return f.get(e.name).deserialize(e.value);case"RAW":return e.value}}function x(e,t,n,s){return new Promise((o=>{const i=new Array(4).fill(0).map((()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16))).join("-");t.set(i,o),e.start&&e.start(),e.postMessage(Object.assign({id:i},n),s)}))}exports.FEAScriptModel=class{constructor(){this.solverConfig=null,this.meshConfig={},this.boundaryConditions={},this.solverMethod="lusolve",s("FEAScriptModel instance created")}setSolverConfig(e){this.solverConfig=e,n(`Solver config set to: ${e}`)}setMeshConfig(e){this.meshConfig=e,n(`Mesh config set with dimensions: ${e.meshDimension}`)}addBoundaryCondition(e,t){this.boundaryConditions[e]=t,n(`Boundary condition added for boundary: ${e}, type: ${t[0]}`)}setSolverMethod(e){this.solverMethod=e,n(`Solver method set to: ${e}`)}solve(){if(!this.solverConfig||!this.meshConfig||!this.boundaryConditions){const e="Solver config, mesh config, and boundary conditions must be set before solving.";throw console.error(e),new Error(e)}let t=[],o=[],l=[],d={};if(s("Beginning matrix assembly..."),console.time("assemblyMatrices"),"solidHeatTransferScript"===this.solverConfig&&(s(`Using solver: ${this.solverConfig}`),({jacobianMatrix:t,residualVector:o,nodesCoordinates:d}=function(t,o){s("Starting solid heat transfer matrix assembly...");const{meshDimension:l,numElementsX:d,numElementsY:h,maxX:m,maxY:u,elementOrder:c,parsedMesh:f}=t;n("Generating mesh...");const p=new r({numElementsX:d,numElementsY:h,maxX:m,maxY:u,meshDimension:l,elementOrder:c,parsedMesh:f}).generateMesh();let y,g,b=p.nodesXCoordinates,E=p.nodesYCoordinates,M=p.totalNodesX,$=p.totalNodesY,v=p.nodalNumbering,w=p.boundaryElements;null!=f?(y=v.length,g=b.length,n(`Using parsed mesh with ${y} elements and ${g} nodes`)):(y=d*("2D"===l?h:1),g=M*("2D"===l?$:1),n(`Using mesh generated from geometry with ${y} elements and ${g} nodes`));let C,N,S,x,D,O,A,F=[],T=[],k=[],X=[],P=[],R=[],Y=[],W=[],I=[],j=[];for(let e=0;e<g;e++){I[e]=0,j.push([]);for(let t=0;t<g;t++)j[e][t]=0}const B=new i({meshDimension:l,elementOrder:c});let q=new e({meshDimension:l,elementOrder:c}).getGaussPointsAndWeights();T=q.gaussPoints,k=q.gaussWeights;const L=v[0].length;for(let e=0;e<y;e++){for(let t=0;t<L;t++)F[t]=v[e][t]-1;for(let e=0;e<T.length;e++)if("1D"===l){let t=B.getBasisFunctions(T[e]);X=t.basisFunction,P=t.basisFunctionDerivKsi,C=0,S=0,A=0;for(let e=0;e<L;e++)C+=b[F[e]]*X[e],S+=b[F[e]]*P[e],A=S;for(let e=0;e<L;e++)Y[e]=P[e]/A;for(let t=0;t<L;t++){let n=F[t];for(let s=0;s<L;s++){let o=F[s];j[n][o]+=-k[e]*A*(Y[t]*Y[s])}}}else if("2D"===l)for(let t=0;t<T.length;t++){let n=B.getBasisFunctions(T[e],T[t]);X=n.basisFunction,P=n.basisFunctionDerivKsi,R=n.basisFunctionDerivEta,C=0,N=0,S=0,x=0,D=0,O=0,A=0;for(let e=0;e<L;e++)C+=b[F[e]]*X[e],N+=E[F[e]]*X[e],S+=b[F[e]]*P[e],x+=b[F[e]]*R[e],D+=E[F[e]]*P[e],O+=E[F[e]]*R[e],A="2D"===l?S*O-x*D:S;for(let e=0;e<L;e++)Y[e]=(O*P[e]-D*R[e])/A,W[e]=(S*R[e]-x*P[e])/A;for(let n=0;n<L;n++){let s=F[n];for(let o=0;o<L;o++){let i=F[o];j[s][i]+=-k[e]*k[t]*A*(Y[n]*Y[o]+W[n]*W[o])}}}}n("Applying thermal boundary conditions...");const G=new a(o,w,v,l,c);return G.imposeConvectionBoundaryConditions(I,j,T,k,b,E,B),n("Convection boundary conditions applied"),G.imposeConstantTempBoundaryConditions(I,j),n("Constant temperature boundary conditions applied"),s("Solid heat transfer matrix assembly completed"),{jacobianMatrix:j,residualVector:I,nodesCoordinates:{nodesXCoordinates:b,nodesYCoordinates:E}}}(this.meshConfig,this.boundaryConditions))),console.timeEnd("assemblyMatrices"),s("Matrix assembly completed"),s(`Solving system using ${this.solverMethod}...`),console.time("systemSolving"),"lusolve"===this.solverMethod)l=math.lusolve(t,o);else if("jacobi"===this.solverMethod){const e=function(e,t,n,s=100,o=1e-7){const i=e.length;let r=[...n],a=new Array(i);for(let n=0;n<s;n++){for(let n=0;n<i;n++){let s=0;for(let t=0;t<i;t++)t!==n&&(s+=e[n][t]*r[t]);a[n]=(t[n]-s)/e[n][n]}let s=0;for(let e=0;e<i;e++)s=Math.max(s,Math.abs(a[e]-r[e]));if(r=[...a],s<o)return{solution:r,iterations:n+1,converged:!0}}return{solution:r,iterations:s,converged:!1}}(t,o,new Array(o.length).fill(0),1e3,1e-6);e.converged?n(`Jacobi method converged in ${e.iterations} iterations`):n(`Jacobi method did not converge after ${e.iterations} iterations`),l=e.solution}return console.timeEnd("systemSolving"),s("System solved successfully"),{solutionVector:l,nodesCoordinates:d}}},exports.FEAScriptWorker=class{constructor(){this.worker=null,this.feaWorker=null,this.isReady=!1,this._initWorker()}async _initWorker(){try{this.worker=new Worker(new URL("./wrapperScript.js","undefined"==typeof document?new(require("url").URL)("file:"+__filename).href:document.currentScript&&"SCRIPT"===document.currentScript.tagName.toUpperCase()&&document.currentScript.src||new URL("feascript.cjs.js",document.baseURI).href),{type:"module"}),this.worker.onerror=e=>{console.error("FEAScriptWorker: Worker error:",e)};const e=g(this.worker);this.feaWorker=await new e,this.isReady=!0}catch(e){throw console.error("Failed to initialize worker",e),e}}async _ensureReady(){return this.isReady?Promise.resolve():new Promise(((e,t)=>{let n=0;const s=()=>{n++,this.isReady?e():n>=50?t(new Error("Timeout waiting for worker to be ready")):setTimeout(s,1e3)};s()}))}async setSolverConfig(e){return await this._ensureReady(),s(`FEAScriptWorker: Setting solver config to: ${e}`),this.feaWorker.setSolverConfig(e)}async setMeshConfig(e){return await this._ensureReady(),s("FEAScriptWorker: Setting mesh config"),this.feaWorker.setMeshConfig(e)}async addBoundaryCondition(e,t){return await this._ensureReady(),s(`FEAScriptWorker: Adding boundary condition for boundary: ${e}`),this.feaWorker.addBoundaryCondition(e,t)}async setSolverMethod(e){return await this._ensureReady(),s(`FEAScriptWorker: Setting solver method to: ${e}`),this.feaWorker.setSolverMethod(e)}async solve(){await this._ensureReady(),s("FEAScriptWorker: Requesting solution from worker...");const e=performance.now(),t=await this.feaWorker.solve();return s(`FEAScriptWorker: Solution completed in ${((performance.now()-e)/1e3).toFixed(2)}s`),t}async getModelInfo(){return await this._ensureReady(),this.feaWorker.getModelInfo()}async ping(){return await this._ensureReady(),this.feaWorker.ping()}terminate(){this.worker&&(this.worker.terminate(),this.worker=null,this.feaWorker=null,this.isReady=!1)}},exports.VERSION="0.1.1",exports.importGmshQuadTri=async e=>{let t={nodesXCoordinates:[],nodesYCoordinates:[],nodalNumbering:{quadElements:[],triangleElements:[]},boundaryElements:[],boundaryConditions:[],boundaryNodePairs:{},gmshV:0,ascii:!1,fltBytes:"8",totalNodesX:0,totalNodesY:0,physicalPropMap:[],elementTypes:{}},s=(await e.text()).split("\n").map((e=>e.trim())).filter((e=>""!==e&&" "!==e)),o="",i=0,r=0,a=0,l=0,d={numNodes:0},h=0,m=[],u=0,c=0,f=0,p={dim:0,tag:0,elementType:0,numElements:0},y=0,g={};for(;i<s.length;){const e=s[i];if("$MeshFormat"===e){o="meshFormat",i++;continue}if("$EndMeshFormat"===e){o="",i++;continue}if("$PhysicalNames"===e){o="physicalNames",i++;continue}if("$EndPhysicalNames"===e){o="",i++;continue}if("$Entities"===e){o="entities",i++;continue}if("$EndEntities"===e){o="",i++;continue}if("$Nodes"===e){o="nodes",i++;continue}if("$EndNodes"===e){o="",i++;continue}if("$Elements"===e){o="elements",i++;continue}if("$EndElements"===e){o="",i++;continue}const n=e.split(/\s+/).filter((e=>""!==e));if("meshFormat"===o)t.gmshV=parseFloat(n[0]),t.ascii="0"===n[1],t.fltBytes=n[2];else if("physicalNames"===o){if(n.length>=3){if(!/^\d+$/.test(n[0])){i++;continue}const e=parseInt(n[0],10),s=parseInt(n[1],10);let o=n.slice(2).join(" ");o=o.replace(/^"|"$/g,""),t.physicalPropMap.push({tag:s,dimension:e,name:o})}}else if("nodes"===o){if(0===r){r=parseInt(n[0],10),a=parseInt(n[1],10),t.nodesXCoordinates=new Array(a).fill(0),t.nodesYCoordinates=new Array(a).fill(0),i++;continue}if(l<r&&0===d.numNodes){d={dim:parseInt(n[0],10),tag:parseInt(n[1],10),parametric:parseInt(n[2],10),numNodes:parseInt(n[3],10)},m=[],h=0,u=0,i++;continue}if(h<d.numNodes){for(let e=0;e<n.length&&h<d.numNodes;e++)m.push(parseInt(n[e],10)),h++;if(h<d.numNodes){i++;continue}i++;continue}if(u<d.numNodes){const e=m[u]-1,s=parseFloat(n[0]),o=parseFloat(n[1]);t.nodesXCoordinates[e]=s,t.nodesYCoordinates[e]=o,t.totalNodesX++,t.totalNodesY++,u++,u===d.numNodes&&(l++,d={numNodes:0})}}else if("elements"===o){if(0===c){c=parseInt(n[0],10),parseInt(n[1],10),i++;continue}if(f<c&&0===p.numElements){p={dim:parseInt(n[0],10),tag:parseInt(n[1],10),elementType:parseInt(n[2],10),numElements:parseInt(n[3],10)},t.elementTypes[p.elementType]=(t.elementTypes[p.elementType]||0)+p.numElements,y=0,i++;continue}if(y<p.numElements){parseInt(n[0],10);const e=n.slice(1).map((e=>parseInt(e,10)));if(1===p.elementType||8===p.elementType){const n=p.tag;g[n]||(g[n]=[]),g[n].push(e),t.boundaryNodePairs[n]||(t.boundaryNodePairs[n]=[]),t.boundaryNodePairs[n].push(e)}else 2===p.elementType?t.nodalNumbering.triangleElements.push(e):(3===p.elementType||10===p.elementType)&&t.nodalNumbering.quadElements.push(e);y++,y===p.numElements&&(f++,p={numElements:0})}}i++}return t.physicalPropMap.forEach((e=>{if(1===e.dimension){const n=g[e.tag]||[];n.length>0&&t.boundaryConditions.push({name:e.name,tag:e.tag,nodes:n})}})),n(`Parsed boundary node pairs by physical tag: ${JSON.stringify(t.boundaryNodePairs)}. These pairs will be used to identify boundary elements in the mesh.`),t},exports.logSystem=function(e){"basic"!==e&&"debug"!==e?(console.log("%c[WARN] Invalid log level: "+e+". Using basic instead.","color: #FFC107; font-weight: bold;"),t="basic"):(t=e,s(`Log level set to: ${e}`))},exports.plotSolution=function(e,t,n,s,o,i,r="structured"){const{nodesXCoordinates:a,nodesYCoordinates:l}=t;if("1D"===s&&"line"===o){let t;t=e.length>0&&Array.isArray(e[0])?e.map((e=>e[0])):e;let s=Array.from(a),o={x:s,y:t,mode:"lines",type:"scatter",line:{color:"rgb(219, 64, 82)",width:2},name:"Solution"},r=Math.min(window.innerWidth,700),l=Math.max(...s),d=r/l,h={title:`line plot - ${n}`,width:Math.max(d*l,400),height:350,xaxis:{title:"x"},yaxis:{title:"Solution"},margin:{l:70,r:40,t:50,b:50}};Plotly.newPlot(i,[o],h,{responsive:!0})}else if("2D"===s&&"contour"===o){const t="structured"===r,s=new Set(a).size,d=new Set(l).size;let h=Array.isArray(e[0])?e.map((e=>e[0])):e,m=Math.min(window.innerWidth,700),u=Math.max(...a),c=Math.max(...l)/u,f=Math.min(m,600),p={title:`${o} plot - ${n}`,width:f,height:f*c*.8,xaxis:{title:"x"},yaxis:{title:"y"},margin:{l:50,r:50,t:50,b:50},hovermode:"closest"};if(t){const t=s,n=d;math.reshape(Array.from(a),[t,n]);let o=math.reshape(Array.from(l),[t,n]),r=math.reshape(Array.from(e),[t,n]),h=math.transpose(r),m=[];for(let e=0;e<t*n;e+=n){let t=a[e];m.push(t)}let u={z:h,type:"contour",contours:{coloring:"heatmap",showlabels:!1},colorbar:{title:"Solution"},x:m,y:o[0],name:"Solution Field"};Plotly.newPlot(i,[u],p,{responsive:!0})}else{let e={x:a,y:l,z:h,type:"contour",contours:{coloring:"heatmap",showlabels:!1},colorbar:{title:"Solution"},name:"Solution Field"};Plotly.newPlot(i,[e],p,{responsive:!0})}}},exports.printVersion=async function(){s("Fetching latest FEAScript version information...");try{const e=await fetch("https://api.github.com/repos/FEAScript/FEAScript/commits/main"),t=await e.json(),n=new Date(t.commit.committer.date).toLocaleString();return s(`Latest FEAScript update: ${n}`),n}catch(e){return o("Failed to fetch version information: "+e),"Version information unavailable"}};
//# sourceMappingURL=feascript.cjs.js.map
