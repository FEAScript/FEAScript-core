function e(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n]*e[n];return t=Math.sqrt(t),t}let t="basic";function n(e){"basic"!==e&&"debug"!==e?(console.log("%c[WARN] Invalid log level: "+e+". Using basic instead.","color: #FFC107; font-weight: bold;"),t="basic"):(t=e,s(`Log level set to: ${e}`))}function o(e){"debug"===t&&console.log("%c[DEBUG] "+e,"color: #2196F3; font-weight: bold;")}function s(e){console.log("%c[INFO] "+e,"color: #4CAF50; font-weight: bold;")}function i(e){console.log("%c[ERROR] "+e,"color: #F44336; font-weight: bold;")}async function r(){s("Fetching latest FEAScript version information...");try{const e=await fetch("https://api.github.com/repos/FEAScript/FEAScript/commits/main"),t=await e.json(),n=new Date(t.commit.committer.date).toLocaleString();return s(`Latest FEAScript update: ${n}`),n}catch(e){return i("Failed to fetch version information: "+e),"Version information unavailable"}}function a(e,t,n,r={}){const{maxIterations:a=1e3,tolerance:h=1e-9}=r,c=e.length;if(!function(e,t=1e-12){const n=e.length;for(let o=0;o<n;o++)for(let s=o+1;s<n;s++)if(Math.abs(Number(e[o][s])-Number(e[s][o]))>t)return!1;return!0}(e,1e-12))return o("Matrix is not symmetric, falling back to robust iterative method"),u(e,t,n,r);let f=[...n],p=l(e,t,f),g=[...p],y=m(p,p),b=0,E=!1;for(s(`Starting CPU Conjugate Gradient solver for system of size ${c}`);b<a&&!E;){const n=d(e,g),s=m(g,n);if(Math.abs(s)<1e-16||s<=0)return i("Matrix is not positive definite or numerical breakdown occurred"),o("Falling back to robust iterative method"),u(e,t,f,r);const a=y/s;if(!isFinite(a)||Math.abs(a)>1e10)return i("Numerical instability detected in CG algorithm"),o("Falling back to robust iterative method"),u(e,t,f,r);for(let e=0;e<c;e++)f[e]=Number(f[e])+Number(a*g[e]);for(let e=0;e<c;e++)p[e]=Number(p[e])-Number(a*n[e]);const l=m(p,p),v=Math.sqrt(l);if(v<h){E=!0,o(`CPU CG converged in ${b+1} iterations with residual norm ${v.toExponential(6)}`);break}const $=l/y;for(let e=0;e<c;e++)g[e]=Number(p[e])+Number($*g[e]);y=l,b++,b%100==0&&o(`CPU CG iteration ${b}: residual norm = ${v.toExponential(6)}`)}const v=Math.sqrt(m(p,p));return E||o(`CPU CG did not converge after ${a} iterations. Final residual norm: ${v.toExponential(6)}`),{solutionVector:f,iterations:b,converged:E,residualNorm:v}}function l(e,t,n){const o=e.length,s=new Array(o);for(let i=0;i<o;i++){let r=0;for(let t=0;t<o;t++)r+=Number(e[i][t])*Number(n[t]);s[i]=Number(t[i])-r}return s}function d(e,t){const n=e.length,o=new Array(n);for(let s=0;s<n;s++){let i=0;for(let o=0;o<n;o++)i+=Number(e[s][o])*Number(t[o]);o[s]=i}return o}function m(e,t){let n=0;for(let o=0;o<e.length;o++)n+=Number(e[o])*Number(t[o]);return n}function u(e,t,n,r={}){const{maxIterations:a=1e3,tolerance:d=1e-9}=r,u=e.length;let h=[...n],c=!1,f=0;for(s(`Starting robust iterative solver for system of size ${u}`);f<a&&!c;){let n=0;for(let o=0;o<u;o++){let s=0;for(let t=0;t<u;t++)t!==o&&(s+=Number(e[o][t])*Number(h[t]));const r=Number(e[o][o]);if(Math.abs(r)<1e-16)return i(`Zero diagonal element at row ${o}, cannot continue`),{solutionVector:h,iterations:f,converged:!1,residualNorm:1/0};const a=(Number(t[o])-s)/r,l=Math.abs(a-Number(h[o]));n=Math.max(n,l);const d=.8;h[o]=Number(h[o])+d*(a-Number(h[o]))}if(f++,n<d){c=!0,o(`Robust iterative solver converged in ${f} iterations with max change ${n.toExponential(6)}`);break}f%100==0&&o(`Robust solver iteration ${f}: max change = ${n.toExponential(6)}`)}const p=l(e,t,h),g=Math.sqrt(m(p,p));return c||o(`Robust iterative solver did not converge after ${a} iterations. Final residual norm: ${g.toExponential(6)}`),{solutionVector:h,iterations:f,converged:c,residualNorm:g}}async function h(e,t,n,r={}){const{maxIterations:h=1e3,tolerance:c=1e-6}=r;let f=[],p=!0,g=0;if(s(`Solving system using ${e}...`),console.time("systemSolving"),"lusolve"===e)f=math.lusolve(t,n);else if("jacobi"===e){const e=function(e,t,n,o={}){const{maxIterations:s=1e3,tolerance:i=1e-6}=o,r=e.length;let a=[...n],l=new Array(r);for(let n=0;n<s;n++){for(let n=0;n<r;n++){let o=0;for(let t=0;t<r;t++)t!==n&&(o+=e[n][t]*a[t]);l[n]=(t[n]-o)/e[n][n]}let o=0;for(let e=0;e<r;e++)o=Math.max(o,Math.abs(l[e]-a[e]));if(a=[...l],o<i)return{solutionVector:a,iterations:n+1,converged:!0}}return{solutionVector:a,iterations:s,converged:!1}}(t,n,new Array(n.length).fill(0),{maxIterations:h,tolerance:c});e.converged?o(`Jacobi method converged in ${e.iterations} iterations`):o(`Jacobi method did not converge after ${e.iterations} iterations`),f=e.solutionVector,p=e.converged,g=e.iterations}else if("conjugate-gradient-webgpu"===e){const e=new Array(n.length).fill(0),r=Math.min(c,1e-9),y=await async function(e,t,n,r={}){const{maxIterations:h=1e3,tolerance:c=1e-9,enablePrecision:f=!0}=r;if("undefined"==typeof navigator||!navigator.gpu)return o("WebGPU not available, falling back to CPU implementation"),a(e,t,n,r);try{const f=await navigator.gpu.requestAdapter();if(!f)return o("WebGPU adapter not available, falling back to CPU implementation"),a(e,t,n,r);await f.requestDevice();const p=e.length;let g=[...n],y=l(e,t,g),b=[...y],E=m(y,y),v=0,$=!1;for(s(`Starting WebGPU Conjugate Gradient solver for system of size ${p}`);v<h&&!$;){const n=d(e,b),s=m(b,n);if(Math.abs(s)<1e-16||s<=0)return i("Matrix is not positive definite or numerical breakdown occurred"),o("Falling back to robust iterative method"),u(e,t,g,r);const a=E/s;if(!isFinite(a)||Math.abs(a)>1e10)return i("Numerical instability detected in CG algorithm"),o("Falling back to robust iterative method"),u(e,t,g,r);for(let e=0;e<p;e++)g[e]+=a*b[e];for(let e=0;e<p;e++)y[e]-=a*n[e];const l=m(y,y),h=Math.sqrt(l);if(h<c){$=!0,o(`WebGPU CG converged in ${v+1} iterations with residual norm ${h.toExponential(6)}`);break}const f=l/E;for(let e=0;e<p;e++)b[e]=y[e]+f*b[e];E=l,v++,v%100==0&&o(`WebGPU CG iteration ${v}: residual norm = ${h.toExponential(6)}`)}const M=Math.sqrt(m(y,y));return $||o(`WebGPU CG did not converge after ${h} iterations. Final residual norm: ${M.toExponential(6)}`),{solutionVector:g,iterations:v,converged:$,residualNorm:M}}catch(s){return i(`WebGPU error occurred: ${s.message}`),o("Falling back to CPU implementation"),a(e,t,n,r)}}(t,n,e,{maxIterations:h,tolerance:r,enablePrecision:!0});y.converged?o(`WebGPU Conjugate Gradient method converged in ${y.iterations} iterations with residual norm ${y.residualNorm.toExponential(6)}`):o(`WebGPU Conjugate Gradient method did not converge after ${y.iterations} iterations. Final residual norm: ${y.residualNorm.toExponential(6)}`),f=y.solutionVector,p=y.converged,g=y.iterations}else i(`Unknown solver method: ${e}`);return console.timeEnd("systemSolving"),s("System solved successfully"),{solutionVector:f,converged:p,iterations:g}}async function c(t,n,o=100,r=1e-4){let a=0,l=!1,d=0,m=[],u=[],c=[],f=[],p={},g=function(e){const{meshDimension:t,numElementsX:n,numElementsY:o,elementOrder:s,parsedMesh:i}=e;if(i&&i.nodesXCoordinates)return i.nodesXCoordinates.length;{let e,i=1;return"linear"===s?(e=n+1,"2D"===t&&(i=o+1)):"quadratic"===s&&(e=2*n+1,"2D"===t&&(i=2*o+1)),e*i}}(n.meshConfig);for(let e=0;e<g;e++)m[e]=0,u[e]=0;for(n.initialSolution&&n.initialSolution.length===g&&(u=[...n.initialSolution]);d<o&&!l;){for(let e=0;e<u.length;e++)u[e]=Number(u[e])+Number(m[e]);({jacobianMatrix:c,residualVector:f,nodesCoordinates:p}=t(n.meshConfig,n.boundaryConditions,u,n.eikonalActivationFlag));if(m=(await h(n.solverMethod,c,f)).solutionVector,a=e(m),s(`Newton-Raphson iteration ${d+1}: Error norm = ${a.toExponential(4)}`),a<=r)l=!0;else if(a>100){i(`Solution not converged. Error norm: ${a}`);break}d++}return{solutionVector:u,converged:l,iterations:d,jacobianMatrix:c,residualVector:f,nodesCoordinates:p}}class f{constructor(e,t,n,o,s){this.boundaryConditions=e,this.boundaryElements=t,this.nop=n,this.meshDimension=o,this.elementOrder=s}imposeConstantValueBoundaryConditions(e,t){s("Applying constant value boundary conditions (Dirichlet type)"),"1D"===this.meshDimension?Object.keys(this.boundaryConditions).forEach((n=>{if("constantValue"===this.boundaryConditions[n][0]){const s=this.boundaryConditions[n][1];o(`Boundary ${n}: Applying constant value of ${s} (Dirichlet condition)`),this.boundaryElements[n].forEach((([n,i])=>{if("linear"===this.elementOrder){({0:[0],1:[1]})[i].forEach((i=>{const r=this.nop[n][i]-1;o(`  - Applied constant value to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=s;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}else if("quadratic"===this.elementOrder){({0:[0],2:[2]})[i].forEach((i=>{const r=this.nop[n][i]-1;o(`  - Applied constant value to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=s;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}}))}})):"2D"===this.meshDimension&&Object.keys(this.boundaryConditions).forEach((n=>{if("constantValue"===this.boundaryConditions[n][0]){const s=this.boundaryConditions[n][1];o(`Boundary ${n}: Applying constant value of ${s} (Dirichlet condition)`),this.boundaryElements[n].forEach((([n,i])=>{if("linear"===this.elementOrder){({0:[0,2],1:[0,1],2:[1,3],3:[2,3]})[i].forEach((i=>{const r=this.nop[n][i]-1;o(`  - Applied constant value to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=s;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}else if("quadratic"===this.elementOrder){({0:[0,3,6],1:[0,1,2],2:[2,5,8],3:[6,7,8]})[i].forEach((i=>{const r=this.nop[n][i]-1;o(`  - Applied constant value to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=s;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}}))}}))}}class p{constructor({meshDimension:e,elementOrder:t}){this.meshDimension=e,this.elementOrder=t}getBasisFunctions(e,t=null){let n=[],o=[],s=[];if("1D"===this.meshDimension)"linear"===this.elementOrder?(n[0]=1-e,n[1]=e,o[0]=-1,o[1]=1):"quadratic"===this.elementOrder&&(n[0]=1-3*e+2*e**2,n[1]=4*e-4*e**2,n[2]=2*e**2-e,o[0]=4*e-3,o[1]=4-8*e,o[2]=4*e-1);else if("2D"===this.meshDimension){if(null===t)return void i("Eta coordinate is required for 2D elements");if("linear"===this.elementOrder){function r(e){return 1-e}n[0]=r(e)*r(t),n[1]=r(e)*t,n[2]=e*r(t),n[3]=e*t,o[0]=-1*r(t),o[1]=-1*t,o[2]=1*r(t),o[3]=1*t,s[0]=-1*r(e),s[1]=1*r(e),s[2]=-1*e,s[3]=1*e}else if("quadratic"===this.elementOrder){function a(e){return 2*e**2-3*e+1}function l(e){return-4*e**2+4*e}function d(e){return 2*e**2-e}function m(e){return 4*e-3}function u(e){return-8*e+4}function h(e){return 4*e-1}n[0]=a(e)*a(t),n[1]=a(e)*l(t),n[2]=a(e)*d(t),n[3]=l(e)*a(t),n[4]=l(e)*l(t),n[5]=l(e)*d(t),n[6]=d(e)*a(t),n[7]=d(e)*l(t),n[8]=d(e)*d(t),o[0]=m(e)*a(t),o[1]=m(e)*l(t),o[2]=m(e)*d(t),o[3]=u(e)*a(t),o[4]=u(e)*l(t),o[5]=u(e)*d(t),o[6]=h(e)*a(t),o[7]=h(e)*l(t),o[8]=h(e)*d(t),s[0]=a(e)*m(t),s[1]=a(e)*u(t),s[2]=a(e)*h(t),s[3]=l(e)*m(t),s[4]=l(e)*u(t),s[5]=l(e)*h(t),s[6]=d(e)*m(t),s[7]=d(e)*u(t),s[8]=d(e)*h(t)}}return{basisFunction:n,basisFunctionDerivKsi:o,basisFunctionDerivEta:s}}}class g{constructor({numElementsX:e=null,maxX:t=null,numElementsY:n=null,maxY:o=null,meshDimension:i=null,elementOrder:r="linear",parsedMesh:a=null}){this.numElementsX=e,this.numElementsY=n,this.maxX=t,this.maxY=o,this.meshDimension=i,this.elementOrder=r,this.parsedMesh=a,this.boundaryElementsProcessed=!1,this.parsedMesh&&(s("Using pre-parsed mesh from gmshReader data for mesh generation."),this.parseMeshFromGmsh())}parseMeshFromGmsh(){if(this.parsedMesh.nodalNumbering||i("No valid nodal numbering found in the parsed mesh."),"object"==typeof this.parsedMesh.nodalNumbering&&!Array.isArray(this.parsedMesh.nodalNumbering)){const e=this.parsedMesh.nodalNumbering.quadElements||[];if(this.parsedMesh.nodalNumbering.triangleElements,o("Initial parsed mesh nodal numbering from GMSH format: "+JSON.stringify(this.parsedMesh.nodalNumbering)),this.parsedMesh.elementTypes[3]||this.parsedMesh.elementTypes[10]){const t=[];for(let n=0;n<e.length;n++){const o=e[n],s=new Array(o.length);4===o.length?(s[0]=o[0],s[1]=o[3],s[2]=o[1],s[3]=o[2]):9===o.length&&(s[0]=o[0],s[1]=o[7],s[2]=o[3],s[3]=o[4],s[4]=o[8],s[5]=o[6],s[6]=o[1],s[7]=o[5],s[8]=o[2]),t.push(s)}this.parsedMesh.nodalNumbering=t}else this.parsedMesh.elementTypes[2]&&o("Element type is neither triangle nor quad; mapping for this type is not implemented yet.");if(o("Nodal numbering after mapping from GMSH to FEAScript format: "+JSON.stringify(this.parsedMesh.nodalNumbering)),this.parsedMesh.physicalPropMap&&this.parsedMesh.boundaryElements){if(Array.isArray(this.parsedMesh.boundaryElements)&&this.parsedMesh.boundaryElements.length>0&&void 0===this.parsedMesh.boundaryElements[0]){const e=[];for(let t=1;t<this.parsedMesh.boundaryElements.length;t++)this.parsedMesh.boundaryElements[t]&&e.push(this.parsedMesh.boundaryElements[t]);this.parsedMesh.boundaryElements=e}if(this.parsedMesh.boundaryNodePairs&&!this.parsedMesh.boundaryElementsProcessed&&(this.parsedMesh.boundaryElements=[],this.parsedMesh.physicalPropMap.forEach((e=>{if(1===e.dimension){const t=this.parsedMesh.boundaryNodePairs[e.tag]||[];t.length>0&&(this.parsedMesh.boundaryElements[e.tag]||(this.parsedMesh.boundaryElements[e.tag]=[]),t.forEach((t=>{const n=t[0],s=t[1];o(`Processing boundary node pair: [${n}, ${s}] for boundary ${e.tag} (${e.name||"unnamed"})`);let r=!1;for(let t=0;t<this.parsedMesh.nodalNumbering.length;t++){const i=this.parsedMesh.nodalNumbering[t];if(4===i.length){if(i.includes(n)&&i.includes(s)){let a;const l=i.indexOf(n),d=i.indexOf(s);o(`  Found element ${t} containing boundary nodes. Element nodes: [${i.join(", ")}]`),o(`  Node ${n} is at index ${l}, Node ${s} is at index ${d} in the element`),0===l&&2===d||2===l&&0===d?(a=0,o(`  These nodes form the BOTTOM side (${a}) of element ${t}`)):0===l&&1===d||1===l&&0===d?(a=1,o(`  These nodes form the LEFT side (${a}) of element ${t}`)):1===l&&3===d||3===l&&1===d?(a=2,o(`  These nodes form the TOP side (${a}) of element ${t}`)):(2===l&&3===d||3===l&&2===d)&&(a=3,o(`  These nodes form the RIGHT side (${a}) of element ${t}`)),this.parsedMesh.boundaryElements[e.tag].push([t,a]),o(`  Added element-side pair [${t}, ${a}] to boundary tag ${e.tag}`),r=!0;break}}else if(9===i.length&&i.includes(n)&&i.includes(s)){let a;const l=i.indexOf(n),d=i.indexOf(s);o(`  Found element ${t} containing boundary nodes. Element nodes: [${i.join(", ")}]`),o(`  Node ${n} is at index ${l}, Node ${s} is at index ${d} in the element`),0===l&&6===d||6===l&&0===d||0===l&&3===d||3===l&&0===d||3===l&&6===d||6===l&&3===d?(a=0,o(`  These nodes form the BOTTOM side (${a}) of element ${t}`)):0===l&&2===d||2===l&&0===d||0===l&&1===d||1===l&&0===d||1===l&&2===d||2===l&&1===d?(a=1,o(`  These nodes form the LEFT side (${a}) of element ${t}`)):2===l&&8===d||8===l&&2===d||2===l&&5===d||5===l&&2===d||5===l&&8===d||8===l&&5===d?(a=2,o(`  These nodes form the TOP side (${a}) of element ${t}`)):(6===l&&8===d||8===l&&6===d||6===l&&7===d||7===l&&6===d||7===l&&8===d||8===l&&7===d)&&(a=3,o(`  These nodes form the RIGHT side (${a}) of element ${t}`)),this.parsedMesh.boundaryElements[e.tag].push([t,a]),o(`  Added element-side pair [${t}, ${a}] to boundary tag ${e.tag}`),r=!0;break}}r||i(`Could not find element containing boundary nodes ${n} and ${s}. Boundary may be incomplete.`)})))}})),this.boundaryElementsProcessed=!0,this.parsedMesh.boundaryElements.length>0&&void 0===this.parsedMesh.boundaryElements[0])){const e=[];for(let t=1;t<this.parsedMesh.boundaryElements.length;t++)this.parsedMesh.boundaryElements[t]&&e.push(this.parsedMesh.boundaryElements[t]);this.parsedMesh.boundaryElements=e}}}return this.parsedMesh}}class y extends g{constructor({numElementsX:e=null,maxX:t=null,elementOrder:n="linear",parsedMesh:o=null}){super({numElementsX:e,maxX:t,numElementsY:1,maxY:0,meshDimension:"1D",elementOrder:n,parsedMesh:o}),null!==this.numElementsX&&null!==this.maxX||i("numElementsX and maxX are required parameters when generating a 1D mesh from geometry")}generateMesh(){let e=[];let t,n;if("linear"===this.elementOrder){t=this.numElementsX+1,n=(this.maxX-0)/this.numElementsX,e[0]=0;for(let o=1;o<t;o++)e[o]=e[o-1]+n}else if("quadratic"===this.elementOrder){t=2*this.numElementsX+1,n=(this.maxX-0)/this.numElementsX,e[0]=0;for(let o=1;o<t;o++)e[o]=e[o-1]+n/2}const s=this.generate1DNodalNumbering(this.numElementsX,t,this.elementOrder),i=this.findBoundaryElements();return o("Generated node X coordinates: "+JSON.stringify(e)),{nodesXCoordinates:e,totalNodesX:t,nodalNumbering:s,boundaryElements:i}}generate1DNodalNumbering(e,t,n){let o=[];if("linear"===n)for(let t=0;t<e;t++){o[t]=[];for(let e=1;e<=2;e++)o[t][e-1]=t+e}else if("quadratic"===n){let t=0;for(let n=0;n<e;n++){o[n]=[];for(let e=1;e<=3;e++)o[n][e-1]=n+e+t;t+=1}}return o}findBoundaryElements(){const e=[];for(let t=0;t<2;t++)e.push([]);return e[0].push([0,0]),e[1].push([this.numElementsX-1,1]),o("Identified boundary elements by side: "+JSON.stringify(e)),this.boundaryElementsProcessed=!0,e}}class b extends g{constructor({numElementsX:e=null,maxX:t=null,numElementsY:n=null,maxY:o=null,elementOrder:s="linear",parsedMesh:r=null}){super({numElementsX:e,maxX:t,numElementsY:n,maxY:o,meshDimension:"2D",elementOrder:s,parsedMesh:r}),null!==this.numElementsX&&null!==this.maxX&&null!==this.numElementsY&&null!==this.maxY||i("numElementsX, maxX, numElementsY, and maxY are required parameters when generating a 2D mesh from geometry")}generateMesh(){let e=[],t=[];let n,s,i,r;if("linear"===this.elementOrder){n=this.numElementsX+1,s=this.numElementsY+1,i=(this.maxX-0)/this.numElementsX,r=(this.maxY-0)/this.numElementsY,e[0]=0,t[0]=0;for(let n=1;n<s;n++)e[n]=e[0],t[n]=t[0]+n*r;for(let o=1;o<n;o++){const n=o*s;e[n]=e[0]+o*i,t[n]=t[0];for(let o=1;o<s;o++)e[n+o]=e[n],t[n+o]=t[n]+o*r}}else if("quadratic"===this.elementOrder){n=2*this.numElementsX+1,s=2*this.numElementsY+1,i=(this.maxX-0)/this.numElementsX,r=(this.maxY-0)/this.numElementsY,e[0]=0,t[0]=0;for(let n=1;n<s;n++)e[n]=e[0],t[n]=t[0]+n*r/2;for(let o=1;o<n;o++){const n=o*s;e[n]=e[0]+o*i/2,t[n]=t[0];for(let o=1;o<s;o++)e[n+o]=e[n],t[n+o]=t[n]+o*r/2}}const a=this.generate2DNodalNumbering(this.numElementsX,this.numElementsY,s,this.elementOrder),l=this.findBoundaryElements();return o("Generated node X coordinates: "+JSON.stringify(e)),o("Generated node Y coordinates: "+JSON.stringify(t)),{nodesXCoordinates:e,nodesYCoordinates:t,totalNodesX:n,totalNodesY:s,nodalNumbering:a,boundaryElements:l}}generate2DNodalNumbering(e,t,n,o){let s=0,i=[];if("linear"===o){let n=0,o=2;for(let s=0;s<e*t;s++)n+=1,i[s]=[],i[s][0]=s+o-1,i[s][1]=s+o,i[s][2]=s+o+t,i[s][3]=s+o+t+1,n===t&&(o+=1,n=0)}else if("quadratic"===o)for(let o=1;o<=e;o++)for(let e=1;e<=t;e++){i[s]=[];for(let t=1;t<=3;t++){let r=3*t-2;i[s][r-1]=n*(2*o+t-3)+2*e-1,i[s][r]=i[s][r-1]+1,i[s][r+1]=i[s][r-1]+2}s+=1}return i}findBoundaryElements(){const e=[];for(let t=0;t<4;t++)e.push([]);for(let t=0;t<this.numElementsX;t++)for(let n=0;n<this.numElementsY;n++){const o=t*this.numElementsY+n;0===n&&e[0].push([o,0]),0===t&&e[1].push([o,1]),n===this.numElementsY-1&&e[2].push([o,2]),t===this.numElementsX-1&&e[3].push([o,3])}return o("Identified boundary elements by side: "+JSON.stringify(e)),this.boundaryElementsProcessed=!0,e}}class E{constructor({meshDimension:e,elementOrder:t}){this.meshDimension=e,this.elementOrder=t}getGaussPointsAndWeights(){let e=[],t=[];return"linear"===this.elementOrder?(e[0]=.5,t[0]=1):"quadratic"===this.elementOrder&&(e[0]=(1-Math.sqrt(.6))/2,e[1]=.5,e[2]=(1+Math.sqrt(.6))/2,t[0]=5/18,t[1]=8/18,t[2]=5/18),{gaussPoints:e,gaussWeights:t}}}function v(e,t,n,r){s("Starting front propagation matrix assembly...");let a=1-r+.01;s(`eikonalViscousTerm: ${a}`),s(`eikonalActivationFlag: ${r}`);const{meshDimension:l,numElementsX:d,numElementsY:m,maxX:u,maxY:h,elementOrder:c,parsedMesh:g}=e;let v;o("Generating mesh..."),"1D"===l?v=new y({numElementsX:d,maxX:u,elementOrder:c,parsedMesh:g}):"2D"===l?v=new b({numElementsX:d,maxX:u,numElementsY:m,maxY:h,elementOrder:c,parsedMesh:g}):i("Mesh dimension must be either '1D' or '2D'.");const $=v.boundaryElementsProcessed?v.parsedMesh:v.generateMesh();let M=$.nodesXCoordinates,C=$.nodesYCoordinates,w=$.totalNodesX,N=$.totalNodesY,x=$.nodalNumbering,D=$.boundaryElements;let O,S;null!=g?(O=x.length,S=M.length,o(`Using parsed mesh with ${O} elements and ${S} nodes`)):(O=d*("2D"===l?m:1),S=w*("2D"===l?N:1),o(`Using mesh generated from geometry with ${O} elements and ${S} nodes`));let F,A,k,X,P,T,Y,W,R,q=[],G=[],I=[],j=[],B=[],U=[],V=[],L=[],z=[],K=[];for(let e=0;e<S;e++){z[e]=0,K.push([]);for(let t=0;t<S;t++)K[e][t]=0}const _=new p({meshDimension:l,elementOrder:c});let H=new E({meshDimension:l,elementOrder:c}).getGaussPointsAndWeights();G=H.gaussPoints,I=H.gaussWeights;const J=x[0].length;for(let e=0;e<O;e++){for(let t=0;t<J;t++)q[t]=x[e][t]-1;for(let e=0;e<G.length;e++)if("1D"===l){let t=_.getBasisFunctions(G[e]);j=t.basisFunction,B=t.basisFunctionDerivKsi,F=0,k=0,Y=0;for(let e=0;e<J;e++)F+=M[q[e]]*j[e],k+=M[q[e]]*B[e],Y=k;for(let e=0;e<J;e++)V[e]=B[e]/Y}else if("2D"===l)for(let t=0;t<G.length;t++){let o=_.getBasisFunctions(G[e],G[t]);j=o.basisFunction,B=o.basisFunctionDerivKsi,U=o.basisFunctionDerivEta,F=0,A=0,k=0,X=0,P=0,T=0,W=0,R=0;for(let e=0;e<J;e++)F+=M[q[e]]*j[e],A+=C[q[e]]*j[e],k+=M[q[e]]*B[e],X+=M[q[e]]*U[e],P+=C[q[e]]*B[e],T+=C[q[e]]*U[e];Y=k*T-X*P;for(let e=0;e<J;e++)V[e]=(T*B[e]-P*U[e])/Y,L[e]=(k*U[e]-X*B[e])/Y,W+=n[q[e]]*V[e],R+=n[q[e]]*L[e];for(let n=0;n<J;n++){let o=q[n];z[o]+=a*I[e]*I[t]*Y*V[n]*W+a*I[e]*I[t]*Y*L[n]*R,0!==r&&(z[o]+=r*(I[e]*I[t]*Y*j[n]*Math.sqrt(W**2+R**2)-I[e]*I[t]*Y*j[n]));for(let s=0;s<J;s++){let i=q[s];K[o][i]+=-a*I[e]*I[t]*Y*(V[n]*V[s]+L[n]*L[s]),0!==r&&(K[o][i]+=r*(-Y*W*j[n]*I[e]*I[t]/Math.sqrt(W**2+R**2+1e-8)*V[s]-Y*R*j[n]*I[e]*I[t]/Math.sqrt(W**2+R**2+1e-8)*L[s]))}}}}s("Applying generic boundary conditions...");new f(t,D,x,l,c).imposeConstantValueBoundaryConditions(z,K),s("Constant value boundary conditions applied"),o("Residuals at each node:");for(let e=0;e<z.length;e++)o(`Node ${e}: ${z[e].toExponential(6)}`);return s("Front propagation matrix assembly completed"),{jacobianMatrix:K,residualVector:z,nodesCoordinates:{nodesXCoordinates:M,nodesYCoordinates:C}}}class ${constructor(e,t,n,o,s){this.boundaryConditions=e,this.boundaryElements=t,this.nop=n,this.meshDimension=o,this.elementOrder=s}imposeConstantTempBoundaryConditions(e,t){s("Applying constant temperature boundary conditions (Dirichlet type)"),"1D"===this.meshDimension?Object.keys(this.boundaryConditions).forEach((n=>{if("constantTemp"===this.boundaryConditions[n][0]){const s=this.boundaryConditions[n][1];o(`Boundary ${n}: Applying constant temperature of ${s} K (Dirichlet condition)`),this.boundaryElements[n].forEach((([n,i])=>{if("linear"===this.elementOrder){({0:[0],1:[1]})[i].forEach((i=>{const r=this.nop[n][i]-1;o(`  - Applied constant temperature to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=s;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}else if("quadratic"===this.elementOrder){({0:[0],2:[2]})[i].forEach((i=>{const r=this.nop[n][i]-1;o(`  - Applied constant temperature to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=s;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}}))}})):"2D"===this.meshDimension&&Object.keys(this.boundaryConditions).forEach((n=>{if("constantTemp"===this.boundaryConditions[n][0]){const s=this.boundaryConditions[n][1];o(`Boundary ${n}: Applying constant temperature of ${s} K (Dirichlet condition)`),this.boundaryElements[n].forEach((([n,i])=>{if("linear"===this.elementOrder){({0:[0,2],1:[0,1],2:[1,3],3:[2,3]})[i].forEach((i=>{const r=this.nop[n][i]-1;o(`  - Applied constant temperature to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=s;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}else if("quadratic"===this.elementOrder){({0:[0,3,6],1:[0,1,2],2:[2,5,8],3:[6,7,8]})[i].forEach((i=>{const r=this.nop[n][i]-1;o(`  - Applied constant temperature to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=s;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}}))}}))}imposeConvectionBoundaryConditions(e,t,n,i,r,a,l){s("Applying convection boundary conditions (Robin type)");let d=[],m=[];Object.keys(this.boundaryConditions).forEach((e=>{const t=this.boundaryConditions[e];"convection"===t[0]&&(d[e]=t[1],m[e]=t[2])})),"1D"===this.meshDimension?Object.keys(this.boundaryConditions).forEach((n=>{if("convection"===this.boundaryConditions[n][0]){const s=d[n],i=m[n];o(`Boundary ${n}: Applying convection with heat transfer coefficient h=${s} W/(m²·K) and external temperature T∞=${i} K`),this.boundaryElements[n].forEach((([n,r])=>{let a;"linear"===this.elementOrder?a=0===r?0:1:"quadratic"===this.elementOrder&&(a=0===r?0:2);const l=this.nop[n][a]-1;o(`  - Applied convection boundary condition to node ${l+1} (element ${n+1}, local node ${a+1})`),e[l]+=-s*i,t[l][l]+=s}))}})):"2D"===this.meshDimension&&Object.keys(this.boundaryConditions).forEach((s=>{if("convection"===this.boundaryConditions[s][0]){const u=d[s],h=m[s];o(`Boundary ${s}: Applying convection with heat transfer coefficient h=${u} W/(m²·K) and external temperature T∞=${h} K`),this.boundaryElements[s].forEach((([s,d])=>{if("linear"===this.elementOrder){let m,c,f,p,g;0===d?(m=n[0],c=0,f=0,p=3,g=2):1===d?(m=0,c=n[0],f=0,p=2,g=1):2===d?(m=n[0],c=1,f=1,p=4,g=2):3===d&&(m=1,c=n[0],f=2,p=4,g=1);let y=l.getBasisFunctions(m,c),b=y.basisFunction,E=y.basisFunctionDerivKsi,v=y.basisFunctionDerivEta,$=0,M=0,C=0,w=0;const N=this.nop[s].length;for(let e=0;e<N;e++){const t=this.nop[s][e]-1;0===d||2===d?($+=r[t]*E[e],M+=a[t]*E[e]):1!==d&&3!==d||(C+=r[t]*v[e],w+=a[t]*v[e])}let x;x=0===d||2===d?Math.sqrt($**2+M**2):Math.sqrt(C**2+w**2);for(let n=f;n<p;n+=g){let r=this.nop[s][n]-1;o(`  - Applied convection boundary condition to node ${r+1} (element ${s+1}, local node ${n+1})`),e[r]+=-i[0]*x*b[n]*u*h;for(let e=f;e<p;e+=g){let o=this.nop[s][e]-1;t[r][o]+=-i[0]*x*b[n]*b[e]*u}}}else if("quadratic"===this.elementOrder)for(let m=0;m<3;m++){let c,f,p,g,y;0===d?(c=n[m],f=0,p=0,g=7,y=3):1===d?(c=0,f=n[m],p=0,g=3,y=1):2===d?(c=n[m],f=1,p=2,g=9,y=3):3===d&&(c=1,f=n[m],p=6,g=9,y=1);let b=l.getBasisFunctions(c,f),E=b.basisFunction,v=b.basisFunctionDerivKsi,$=b.basisFunctionDerivEta,M=0,C=0,w=0,N=0;const x=this.nop[s].length;for(let e=0;e<x;e++){const t=this.nop[s][e]-1;0===d||2===d?(M+=r[t]*v[e],C+=a[t]*v[e]):1!==d&&3!==d||(w+=r[t]*$[e],N+=a[t]*$[e])}let D;D=0===d||2===d?Math.sqrt(M**2+C**2):Math.sqrt(w**2+N**2);for(let n=p;n<g;n+=y){let r=this.nop[s][n]-1;o(`  - Applied convection boundary condition to node ${r+1} (element ${s+1}, local node ${n+1})`),e[r]+=-i[m]*D*E[n]*u*h;for(let e=p;e<g;e+=y){let o=this.nop[s][e]-1;t[r][o]+=-i[m]*D*E[n]*E[e]*u}}}}))}}))}}class M{constructor(){this.solverConfig=null,this.meshConfig={},this.boundaryConditions={},this.solverMethod="lusolve",s("FEAScriptModel instance created")}setSolverConfig(e){this.solverConfig=e,o(`Solver config set to: ${e}`)}setMeshConfig(e){this.meshConfig=e,o(`Mesh config set with dimensions: ${e.meshDimension}`)}addBoundaryCondition(e,t){this.boundaryConditions[e]=t,o(`Boundary condition added for boundary: ${e}, type: ${t[0]}`)}setSolverMethod(e){this.solverMethod=e,o(`Solver method set to: ${e}`)}async solve(){if(!this.solverConfig||!this.meshConfig||!this.boundaryConditions){const e="Solver config, mesh config, and boundary conditions must be set before solving.";throw console.error(e),new Error(e)}let e=[],t=[],n=[],r=[],a={};if(s("Beginning solving process..."),console.time("totalSolvingTime"),"solidHeatTransferScript"===this.solverConfig){s(`Using solver: ${this.solverConfig}`),({jacobianMatrix:e,residualVector:t,nodesCoordinates:a}=function(e,t){s("Starting solid heat transfer matrix assembly...");const{meshDimension:n,numElementsX:r,numElementsY:a,maxX:l,maxY:d,elementOrder:m,parsedMesh:u}=e;let h;o("Generating mesh..."),"1D"===n?h=new y({numElementsX:r,maxX:l,elementOrder:m,parsedMesh:u}):"2D"===n?h=new b({numElementsX:r,maxX:l,numElementsY:a,maxY:d,elementOrder:m,parsedMesh:u}):i("Mesh dimension must be either '1D' or '2D'.");const c=h.boundaryElementsProcessed?h.parsedMesh:h.generateMesh();let f,g,v=c.nodesXCoordinates,M=c.nodesYCoordinates,C=c.totalNodesX,w=c.totalNodesY,N=c.nodalNumbering,x=c.boundaryElements;null!=u?(f=N.length,g=v.length,o(`Using parsed mesh with ${f} elements and ${g} nodes`)):(f=r*("2D"===n?a:1),g=C*("2D"===n?w:1),o(`Using mesh generated from geometry with ${f} elements and ${g} nodes`));let D,O,S,F,A,k,X,P=[],T=[],Y=[],W=[],R=[],q=[],G=[],I=[],j=[],B=[];for(let e=0;e<g;e++){j[e]=0,B.push([]);for(let t=0;t<g;t++)B[e][t]=0}const U=new p({meshDimension:n,elementOrder:m});let V=new E({meshDimension:n,elementOrder:m}).getGaussPointsAndWeights();T=V.gaussPoints,Y=V.gaussWeights;const L=N[0].length;for(let e=0;e<f;e++){for(let t=0;t<L;t++)P[t]=N[e][t]-1;for(let e=0;e<T.length;e++)if("1D"===n){let t=U.getBasisFunctions(T[e]);W=t.basisFunction,R=t.basisFunctionDerivKsi,D=0,S=0;for(let e=0;e<L;e++)D+=v[P[e]]*W[e],S+=v[P[e]]*R[e];X=S;for(let e=0;e<L;e++)G[e]=R[e]/X;for(let t=0;t<L;t++){let n=P[t];for(let o=0;o<L;o++){let s=P[o];B[n][s]+=-Y[e]*X*(G[t]*G[o])}}}else if("2D"===n)for(let t=0;t<T.length;t++){let n=U.getBasisFunctions(T[e],T[t]);W=n.basisFunction,R=n.basisFunctionDerivKsi,q=n.basisFunctionDerivEta,D=0,O=0,S=0,F=0,A=0,k=0;for(let e=0;e<L;e++)D+=v[P[e]]*W[e],O+=M[P[e]]*W[e],S+=v[P[e]]*R[e],F+=v[P[e]]*q[e],A+=M[P[e]]*R[e],k+=M[P[e]]*q[e];X=S*k-F*A;for(let e=0;e<L;e++)G[e]=(k*R[e]-A*q[e])/X,I[e]=(S*q[e]-F*R[e])/X;for(let n=0;n<L;n++){let o=P[n];for(let s=0;s<L;s++){let i=P[s];B[o][i]+=-Y[e]*Y[t]*X*(G[n]*G[s]+I[n]*I[s])}}}}s("Applying thermal boundary conditions...");const z=new $(t,x,N,n,m);return z.imposeConvectionBoundaryConditions(j,B,T,Y,v,M,U),s("Convection boundary conditions applied"),z.imposeConstantTempBoundaryConditions(j,B),s("Constant temperature boundary conditions applied"),s("Solid heat transfer matrix assembly completed"),{jacobianMatrix:B,residualVector:j,nodesCoordinates:{nodesXCoordinates:v,nodesYCoordinates:M}}}(this.meshConfig,this.boundaryConditions));n=(await h(this.solverMethod,e,t)).solutionVector}else if("frontPropagationScript"===this.solverConfig){s(`Using solver: ${this.solverConfig}`);let o=0;const i={meshConfig:this.meshConfig,boundaryConditions:this.boundaryConditions,eikonalActivationFlag:o,solverMethod:this.solverMethod,initialSolution:r};for(;o<=1;){i.eikonalActivationFlag=o,n.length>0&&(i.initialSolution=[...n]);const s=await c(v,i,100,1e-4);e=s.jacobianMatrix,t=s.residualVector,a=s.nodesCoordinates,n=s.solutionVector,s.iterations,o+=.2}}return console.timeEnd("totalSolvingTime"),s("Solving process completed"),{solutionVector:n,nodesCoordinates:a}}}const C=async e=>{let t={nodesXCoordinates:[],nodesYCoordinates:[],nodalNumbering:{quadElements:[],triangleElements:[]},boundaryElements:[],boundaryConditions:[],boundaryNodePairs:{},gmshV:0,ascii:!1,fltBytes:"8",totalNodesX:0,totalNodesY:0,physicalPropMap:[],elementTypes:{}},n=(await e.text()).split("\n").map((e=>e.trim())).filter((e=>""!==e&&" "!==e)),s="",i=0,r=0,a=0,l=0,d={numNodes:0},m=0,u=[],h=0,c=0,f=0,p={dim:0,tag:0,elementType:0,numElements:0},g=0,y={};for(;i<n.length;){const e=n[i];if("$MeshFormat"===e){s="meshFormat",i++;continue}if("$EndMeshFormat"===e){s="",i++;continue}if("$PhysicalNames"===e){s="physicalNames",i++;continue}if("$EndPhysicalNames"===e){s="",i++;continue}if("$Entities"===e){s="entities",i++;continue}if("$EndEntities"===e){s="",i++;continue}if("$Nodes"===e){s="nodes",i++;continue}if("$EndNodes"===e){s="",i++;continue}if("$Elements"===e){s="elements",i++;continue}if("$EndElements"===e){s="",i++;continue}const o=e.split(/\s+/).filter((e=>""!==e));if("meshFormat"===s)t.gmshV=parseFloat(o[0]),t.ascii="0"===o[1],t.fltBytes=o[2];else if("physicalNames"===s){if(o.length>=3){if(!/^\d+$/.test(o[0])){i++;continue}const e=parseInt(o[0],10),n=parseInt(o[1],10);let s=o.slice(2).join(" ");s=s.replace(/^"|"$/g,""),t.physicalPropMap.push({tag:n,dimension:e,name:s})}}else if("nodes"===s){if(0===r){r=parseInt(o[0],10),a=parseInt(o[1],10),t.nodesXCoordinates=new Array(a).fill(0),t.nodesYCoordinates=new Array(a).fill(0),i++;continue}if(l<r&&0===d.numNodes){d={dim:parseInt(o[0],10),tag:parseInt(o[1],10),parametric:parseInt(o[2],10),numNodes:parseInt(o[3],10)},u=[],m=0,h=0,i++;continue}if(m<d.numNodes){for(let e=0;e<o.length&&m<d.numNodes;e++)u.push(parseInt(o[e],10)),m++;if(m<d.numNodes){i++;continue}i++;continue}if(h<d.numNodes){const e=u[h]-1,n=parseFloat(o[0]),s=parseFloat(o[1]);t.nodesXCoordinates[e]=n,t.nodesYCoordinates[e]=s,t.totalNodesX++,t.totalNodesY++,h++,h===d.numNodes&&(l++,d={numNodes:0})}}else if("elements"===s){if(0===c){c=parseInt(o[0],10),parseInt(o[1],10),i++;continue}if(f<c&&0===p.numElements){p={dim:parseInt(o[0],10),tag:parseInt(o[1],10),elementType:parseInt(o[2],10),numElements:parseInt(o[3],10)},t.elementTypes[p.elementType]=(t.elementTypes[p.elementType]||0)+p.numElements,g=0,i++;continue}if(g<p.numElements){parseInt(o[0],10);const e=o.slice(1).map((e=>parseInt(e,10)));if(1===p.elementType||8===p.elementType){const n=p.tag;y[n]||(y[n]=[]),y[n].push(e),t.boundaryNodePairs[n]||(t.boundaryNodePairs[n]=[]),t.boundaryNodePairs[n].push(e)}else 2===p.elementType?t.nodalNumbering.triangleElements.push(e):(3===p.elementType||10===p.elementType)&&t.nodalNumbering.quadElements.push(e);g++,g===p.numElements&&(f++,p={numElements:0})}}i++}return t.physicalPropMap.forEach((e=>{if(1===e.dimension){const n=y[e.tag]||[];n.length>0&&t.boundaryConditions.push({name:e.name,tag:e.tag,nodes:n})}})),o(`Parsed boundary node pairs by physical tag: ${JSON.stringify(t.boundaryNodePairs)}. These pairs will be used to identify boundary elements in the mesh.`),t};function w(e,t,n,o,s,i,r="structured"){const{nodesXCoordinates:a,nodesYCoordinates:l}=t;if("1D"===o&&"line"===s){let t;t=e.length>0&&Array.isArray(e[0])?e.map((e=>e[0])):e;let o=Array.from(a),s={x:o,y:t,mode:"lines",type:"scatter",line:{color:"rgb(219, 64, 82)",width:2},name:"Solution"},r=Math.min(window.innerWidth,700),l=Math.max(...o),d=r/l,m={title:`line plot - ${n}`,width:Math.max(d*l,400),height:350,xaxis:{title:"x"},yaxis:{title:"Solution"},margin:{l:70,r:40,t:50,b:50}};Plotly.newPlot(i,[s],m,{responsive:!0})}else if("2D"===o&&"contour"===s){const t="structured"===r,o=new Set(a).size,d=new Set(l).size;let m;m=Array.isArray(e[0])?e.map((e=>e[0])):e;let u=Math.min(window.innerWidth,700),h=Math.max(...a),c=Math.max(...l)/h,f=Math.min(u,600),p={title:`${s} plot - ${n}`,width:f,height:f*c*.8,xaxis:{title:"x"},yaxis:{title:"y"},margin:{l:50,r:50,t:50,b:50},hovermode:"closest"};if(t){const t=o,n=d;math.reshape(Array.from(a),[t,n]);let s=math.reshape(Array.from(l),[t,n]),r=math.reshape(Array.from(e),[t,n]),m=math.transpose(r),u=[];for(let e=0;e<t*n;e+=n){let t=a[e];u.push(t)}let h={z:m,type:"contour",contours:{coloring:"heatmap",showlabels:!1},colorbar:{title:"Solution"},x:u,y:s[0],name:"Solution Field"};Plotly.newPlot(i,[h],p,{responsive:!0})}else{let e={x:a,y:l,z:m,type:"contour",contours:{coloring:"heatmap",showlabels:!1},colorbar:{title:"Solution"},name:"Solution Field"};Plotly.newPlot(i,[e],p,{responsive:!0})}}}
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */const N=Symbol("Comlink.proxy"),x=Symbol("Comlink.endpoint"),D=Symbol("Comlink.releaseProxy"),O=Symbol("Comlink.finalizer"),S=Symbol("Comlink.thrown"),F=e=>"object"==typeof e&&null!==e||"function"==typeof e,A=new Map([["proxy",{canHandle:e=>F(e)&&e[N],serialize(e){const{port1:t,port2:n}=new MessageChannel;return k(e,t),[n,[n]]},deserialize:e=>(e.start(),P(e))}],["throw",{canHandle:e=>F(e)&&S in e,serialize({value:e}){let t;return t=e instanceof Error?{isError:!0,value:{message:e.message,name:e.name,stack:e.stack}}:{isError:!1,value:e},[t,[]]},deserialize(e){if(e.isError)throw Object.assign(new Error(e.value.message),e.value);throw e.value}}]]);function k(e,t=globalThis,n=["*"]){t.addEventListener("message",(function o(s){if(!s||!s.data)return;if(!function(e,t){for(const n of e){if(t===n||"*"===n)return!0;if(n instanceof RegExp&&n.test(t))return!0}return!1}(n,s.origin))return void console.warn(`Invalid origin '${s.origin}' for comlink proxy`);const{id:i,type:r,path:a}=Object.assign({path:[]},s.data),l=(s.data.argumentList||[]).map(B);let d;try{const t=a.slice(0,-1).reduce(((e,t)=>e[t]),e),n=a.reduce(((e,t)=>e[t]),e);switch(r){case"GET":d=n;break;case"SET":t[a.slice(-1)[0]]=B(s.data.value),d=!0;break;case"APPLY":d=n.apply(t,l);break;case"CONSTRUCT":d=function(e){return Object.assign(e,{[N]:!0})}(new n(...l));break;case"ENDPOINT":{const{port1:t,port2:n}=new MessageChannel;k(e,n),d=function(e,t){return I.set(e,t),e}(t,[t])}break;case"RELEASE":d=void 0;break;default:return}}catch(e){d={value:e,[S]:0}}Promise.resolve(d).catch((e=>({value:e,[S]:0}))).then((n=>{const[s,a]=j(n);t.postMessage(Object.assign(Object.assign({},s),{id:i}),a),"RELEASE"===r&&(t.removeEventListener("message",o),X(t),O in e&&"function"==typeof e[O]&&e[O]())})).catch((e=>{const[n,o]=j({value:new TypeError("Unserializable return value"),[S]:0});t.postMessage(Object.assign(Object.assign({},n),{id:i}),o)}))})),t.start&&t.start()}function X(e){(function(e){return"MessagePort"===e.constructor.name})(e)&&e.close()}function P(e,t){const n=new Map;return e.addEventListener("message",(function(e){const{data:t}=e;if(!t||!t.id)return;const o=n.get(t.id);if(o)try{o(t)}finally{n.delete(t.id)}})),q(e,n,[],t)}function T(e){if(e)throw new Error("Proxy has been released and is not useable")}function Y(e){return U(e,new Map,{type:"RELEASE"}).then((()=>{X(e)}))}const W=new WeakMap,R="FinalizationRegistry"in globalThis&&new FinalizationRegistry((e=>{const t=(W.get(e)||0)-1;W.set(e,t),0===t&&Y(e)}));function q(e,t,n=[],o=function(){}){let s=!1;const i=new Proxy(o,{get(o,r){if(T(s),r===D)return()=>{!function(e){R&&R.unregister(e)}(i),Y(e),t.clear(),s=!0};if("then"===r){if(0===n.length)return{then:()=>i};const o=U(e,t,{type:"GET",path:n.map((e=>e.toString()))}).then(B);return o.then.bind(o)}return q(e,t,[...n,r])},set(o,i,r){T(s);const[a,l]=j(r);return U(e,t,{type:"SET",path:[...n,i].map((e=>e.toString())),value:a},l).then(B)},apply(o,i,r){T(s);const a=n[n.length-1];if(a===x)return U(e,t,{type:"ENDPOINT"}).then(B);if("bind"===a)return q(e,t,n.slice(0,-1));const[l,d]=G(r);return U(e,t,{type:"APPLY",path:n.map((e=>e.toString())),argumentList:l},d).then(B)},construct(o,i){T(s);const[r,a]=G(i);return U(e,t,{type:"CONSTRUCT",path:n.map((e=>e.toString())),argumentList:r},a).then(B)}});return function(e,t){const n=(W.get(t)||0)+1;W.set(t,n),R&&R.register(e,t,e)}(i,e),i}function G(e){const t=e.map(j);return[t.map((e=>e[0])),(n=t.map((e=>e[1])),Array.prototype.concat.apply([],n))];var n}const I=new WeakMap;function j(e){for(const[t,n]of A)if(n.canHandle(e)){const[o,s]=n.serialize(e);return[{type:"HANDLER",name:t,value:o},s]}return[{type:"RAW",value:e},I.get(e)||[]]}function B(e){switch(e.type){case"HANDLER":return A.get(e.name).deserialize(e.value);case"RAW":return e.value}}function U(e,t,n,o){return new Promise((s=>{const i=new Array(4).fill(0).map((()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16))).join("-");t.set(i,s),e.start&&e.start(),e.postMessage(Object.assign({id:i},n),o)}))}class V{constructor(){this.worker=null,this.feaWorker=null,this.isReady=!1,this._initWorker()}async _initWorker(){try{this.worker=new Worker(new URL("./wrapperScript.js",import.meta.url),{type:"module"}),this.worker.onerror=e=>{console.error("FEAScriptWorker: Worker error:",e)};const e=P(this.worker);this.feaWorker=await new e,this.isReady=!0}catch(e){throw console.error("Failed to initialize worker",e),e}}async _ensureReady(){return this.isReady?Promise.resolve():new Promise(((e,t)=>{let n=0;const o=()=>{n++,this.isReady?e():n>=50?t(new Error("Timeout waiting for worker to be ready")):setTimeout(o,1e3)};o()}))}async setSolverConfig(e){return await this._ensureReady(),s(`FEAScriptWorker: Setting solver config to: ${e}`),this.feaWorker.setSolverConfig(e)}async setMeshConfig(e){return await this._ensureReady(),s("FEAScriptWorker: Setting mesh config"),this.feaWorker.setMeshConfig(e)}async addBoundaryCondition(e,t){return await this._ensureReady(),s(`FEAScriptWorker: Adding boundary condition for boundary: ${e}`),this.feaWorker.addBoundaryCondition(e,t)}async setSolverMethod(e){return await this._ensureReady(),s(`FEAScriptWorker: Setting solver method to: ${e}`),this.feaWorker.setSolverMethod(e)}async solve(){await this._ensureReady(),s("FEAScriptWorker: Requesting solution from worker...");const e=performance.now(),t=await this.feaWorker.solve();return s(`FEAScriptWorker: Solution completed in ${((performance.now()-e)/1e3).toFixed(2)}s`),t}async getModelInfo(){return await this._ensureReady(),this.feaWorker.getModelInfo()}async ping(){return await this._ensureReady(),this.feaWorker.ping()}terminate(){this.worker&&(this.worker.terminate(),this.worker=null,this.feaWorker=null,this.isReady=!1)}}const L="0.1.3";export{M as FEAScriptModel,V as FEAScriptWorker,L as VERSION,C as importGmshQuadTri,n as logSystem,w as plotSolution,r as printVersion};
//# sourceMappingURL=feascript.esm.js.map
