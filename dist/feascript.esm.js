function e(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n]*e[n];return t=Math.sqrt(t),t}let t="basic";function n(e){"basic"!==e&&"debug"!==e?(console.log("%c[WARN] Invalid log level: "+e+". Using basic instead.","color: #FFC107; font-weight: bold;"),t="basic"):(t=e,o(`Log level set to: ${e}`))}function s(e){"debug"===t&&console.log("%c[DEBUG] "+e,"color: #2196F3; font-weight: bold;")}function o(e){console.log("%c[INFO] "+e,"color: #4CAF50; font-weight: bold;")}function i(e){console.log("%c[ERROR] "+e,"color: #F44336; font-weight: bold;")}async function r(){o("Fetching latest FEAScript version information...");try{const e=await fetch("https://api.github.com/repos/FEAScript/FEAScript/commits/main"),t=await e.json(),n=new Date(t.commit.committer.date).toLocaleString();return o(`Latest FEAScript update: ${n}`),n}catch(e){return i("Failed to fetch version information: "+e),"Version information unavailable"}}function a(e,t,n,r={}){const{maxIterations:a=1e3,tolerance:l=1e-6}=r;let d=[],m=!0,h=0;if(o(`Solving system using ${e}...`),console.time("systemSolving"),"lusolve"===e)d=math.lusolve(t,n);else if("jacobi"===e){const e=function(e,t,n,s={}){const{maxIterations:o=1e3,tolerance:i=1e-6}=s,r=e.length;let a=[...n],l=new Array(r);for(let n=0;n<o;n++){for(let n=0;n<r;n++){let s=0;for(let t=0;t<r;t++)t!==n&&(s+=e[n][t]*a[t]);l[n]=(t[n]-s)/e[n][n]}let s=0;for(let e=0;e<r;e++)s=Math.max(s,Math.abs(l[e]-a[e]));if(a=[...l],s<i)return{solutionVector:a,iterations:n+1,converged:!0}}return{solutionVector:a,iterations:o,converged:!1}}(t,n,new Array(n.length).fill(0),{maxIterations:a,tolerance:l});e.converged?s(`Jacobi method converged in ${e.iterations} iterations`):s(`Jacobi method did not converge after ${e.iterations} iterations`),d=e.solutionVector,m=e.converged,h=e.iterations}else i(`Unknown solver method: ${e}`);return console.timeEnd("systemSolving"),o("System solved successfully"),{solutionVector:d,converged:m,iterations:h}}function l(t,n,s=100,r=1e-4){let l=0,d=!1,m=0,h=[],u=[],c=[],f=[],p={},g=function(e){const{meshDimension:t,numElementsX:n,numElementsY:s,elementOrder:o,parsedMesh:i}=e;if(i&&i.nodesXCoordinates)return i.nodesXCoordinates.length;{let e,i=1;return"linear"===o?(e=n+1,"2D"===t&&(i=s+1)):"quadratic"===o&&(e=2*n+1,"2D"===t&&(i=2*s+1)),e*i}}(n.meshConfig);for(let e=0;e<g;e++)h[e]=0,u[e]=0;for(n.initialSolution&&n.initialSolution.length===g&&(u=[...n.initialSolution]);m<s&&!d;){for(let e=0;e<u.length;e++)u[e]=Number(u[e])+Number(h[e]);"assembleFrontPropagationMat"===t.name?({jacobianMatrix:c,residualVector:f,nodesCoordinates:p}=t(n.meshConfig,n.boundaryConditions,u,n.eikonalActivationFlag)):({jacobianMatrix:c,residualVector:f,nodesCoordinates:p}=t(n.meshConfig,n.boundaryConditions));if(h=a(n.solverMethod,c,f).solutionVector,l=e(h),o(`Newton-Raphson iteration ${m+1}: Error norm = ${l.toExponential(4)}`),l<=r)d=!0;else if(l>100){i(`Solution not converged. Error norm: ${l}`);break}m++}return{solutionVector:u,converged:d,iterations:m,jacobianMatrix:c,residualVector:f,nodesCoordinates:p}}class d{constructor(e,t,n,s,o){this.boundaryConditions=e,this.boundaryElements=t,this.nop=n,this.meshDimension=s,this.elementOrder=o}imposeConstantValueBoundaryConditions(e,t){o("Applying constant value boundary conditions (Dirichlet type)"),"1D"===this.meshDimension?Object.keys(this.boundaryConditions).forEach((n=>{if("constantValue"===this.boundaryConditions[n][0]){const o=this.boundaryConditions[n][1];s(`Boundary ${n}: Applying constant value of ${o} (Dirichlet condition)`),this.boundaryElements[n].forEach((([n,i])=>{if("linear"===this.elementOrder){({0:[0],1:[1]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant value to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=o;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}else if("quadratic"===this.elementOrder){({0:[0],2:[2]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant value to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=o;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}}))}})):"2D"===this.meshDimension&&Object.keys(this.boundaryConditions).forEach((n=>{if("constantValue"===this.boundaryConditions[n][0]){const o=this.boundaryConditions[n][1];s(`Boundary ${n}: Applying constant value of ${o} (Dirichlet condition)`),this.boundaryElements[n].forEach((([n,i])=>{if("linear"===this.elementOrder){({0:[0,2],1:[0,1],2:[1,3],3:[2,3]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant value to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=o;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}else if("quadratic"===this.elementOrder){({0:[0,3,6],1:[0,1,2],2:[2,5,8],3:[6,7,8]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant value to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=o;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}}))}}))}}class m{constructor({meshDimension:e,elementOrder:t}){this.meshDimension=e,this.elementOrder=t}getBasisFunctions(e,t=null){let n=[],s=[],o=[];if("1D"===this.meshDimension)"linear"===this.elementOrder?(n[0]=1-e,n[1]=e,s[0]=-1,s[1]=1):"quadratic"===this.elementOrder&&(n[0]=1-3*e+2*e**2,n[1]=4*e-4*e**2,n[2]=2*e**2-e,s[0]=4*e-3,s[1]=4-8*e,s[2]=4*e-1);else if("2D"===this.meshDimension){if(null===t)return void i("Eta coordinate is required for 2D elements");if("linear"===this.elementOrder){function r(e){return 1-e}n[0]=r(e)*r(t),n[1]=r(e)*t,n[2]=e*r(t),n[3]=e*t,s[0]=-1*r(t),s[1]=-1*t,s[2]=1*r(t),s[3]=1*t,o[0]=-1*r(e),o[1]=1*r(e),o[2]=-1*e,o[3]=1*e}else if("quadratic"===this.elementOrder){function a(e){return 2*e**2-3*e+1}function l(e){return-4*e**2+4*e}function d(e){return 2*e**2-e}function m(e){return 4*e-3}function h(e){return-8*e+4}function u(e){return 4*e-1}n[0]=a(e)*a(t),n[1]=a(e)*l(t),n[2]=a(e)*d(t),n[3]=l(e)*a(t),n[4]=l(e)*l(t),n[5]=l(e)*d(t),n[6]=d(e)*a(t),n[7]=d(e)*l(t),n[8]=d(e)*d(t),s[0]=m(e)*a(t),s[1]=m(e)*l(t),s[2]=m(e)*d(t),s[3]=h(e)*a(t),s[4]=h(e)*l(t),s[5]=h(e)*d(t),s[6]=u(e)*a(t),s[7]=u(e)*l(t),s[8]=u(e)*d(t),o[0]=a(e)*m(t),o[1]=a(e)*h(t),o[2]=a(e)*u(t),o[3]=l(e)*m(t),o[4]=l(e)*h(t),o[5]=l(e)*u(t),o[6]=d(e)*m(t),o[7]=d(e)*h(t),o[8]=d(e)*u(t)}}return{basisFunction:n,basisFunctionDerivKsi:s,basisFunctionDerivEta:o}}}class h{constructor({numElementsX:e=null,maxX:t=null,numElementsY:n=null,maxY:s=null,meshDimension:i=null,elementOrder:r="linear",parsedMesh:a=null}){this.numElementsX=e,this.numElementsY=n,this.maxX=t,this.maxY=s,this.meshDimension=i,this.elementOrder=r,this.parsedMesh=a,this.boundaryElementsProcessed=!1,this.parsedMesh&&(o("Using pre-parsed mesh from gmshReader data for mesh generation."),this.parseMeshFromGmsh())}parseMeshFromGmsh(){if(this.parsedMesh.nodalNumbering||i("No valid nodal numbering found in the parsed mesh."),"object"==typeof this.parsedMesh.nodalNumbering&&!Array.isArray(this.parsedMesh.nodalNumbering)){const e=this.parsedMesh.nodalNumbering.quadElements||[];if(this.parsedMesh.nodalNumbering.triangleElements,s("Initial parsed mesh nodal numbering from GMSH format: "+JSON.stringify(this.parsedMesh.nodalNumbering)),this.parsedMesh.elementTypes[3]||this.parsedMesh.elementTypes[10]){const t=[];for(let n=0;n<e.length;n++){const s=e[n],o=new Array(s.length);4===s.length?(o[0]=s[0],o[1]=s[3],o[2]=s[1],o[3]=s[2]):9===s.length&&(o[0]=s[0],o[1]=s[7],o[2]=s[3],o[3]=s[4],o[4]=s[8],o[5]=s[6],o[6]=s[1],o[7]=s[5],o[8]=s[2]),t.push(o)}this.parsedMesh.nodalNumbering=t}else this.parsedMesh.elementTypes[2]&&s("Element type is neither triangle nor quad; mapping for this type is not implemented yet.");if(s("Nodal numbering after mapping from GMSH to FEAScript format: "+JSON.stringify(this.parsedMesh.nodalNumbering)),this.parsedMesh.physicalPropMap&&this.parsedMesh.boundaryElements){if(Array.isArray(this.parsedMesh.boundaryElements)&&this.parsedMesh.boundaryElements.length>0&&void 0===this.parsedMesh.boundaryElements[0]){const e=[];for(let t=1;t<this.parsedMesh.boundaryElements.length;t++)this.parsedMesh.boundaryElements[t]&&e.push(this.parsedMesh.boundaryElements[t]);this.parsedMesh.boundaryElements=e}if(this.parsedMesh.boundaryNodePairs&&!this.parsedMesh.boundaryElementsProcessed&&(this.parsedMesh.boundaryElements=[],this.parsedMesh.physicalPropMap.forEach((e=>{if(1===e.dimension){const t=this.parsedMesh.boundaryNodePairs[e.tag]||[];t.length>0&&(this.parsedMesh.boundaryElements[e.tag]||(this.parsedMesh.boundaryElements[e.tag]=[]),t.forEach((t=>{const n=t[0],o=t[1];s(`Processing boundary node pair: [${n}, ${o}] for boundary ${e.tag} (${e.name||"unnamed"})`);let r=!1;for(let t=0;t<this.parsedMesh.nodalNumbering.length;t++){const i=this.parsedMesh.nodalNumbering[t];if(4===i.length){if(i.includes(n)&&i.includes(o)){let a;const l=i.indexOf(n),d=i.indexOf(o);s(`  Found element ${t} containing boundary nodes. Element nodes: [${i.join(", ")}]`),s(`  Node ${n} is at index ${l}, Node ${o} is at index ${d} in the element`),0===l&&2===d||2===l&&0===d?(a=0,s(`  These nodes form the BOTTOM side (${a}) of element ${t}`)):0===l&&1===d||1===l&&0===d?(a=1,s(`  These nodes form the LEFT side (${a}) of element ${t}`)):1===l&&3===d||3===l&&1===d?(a=2,s(`  These nodes form the TOP side (${a}) of element ${t}`)):(2===l&&3===d||3===l&&2===d)&&(a=3,s(`  These nodes form the RIGHT side (${a}) of element ${t}`)),this.parsedMesh.boundaryElements[e.tag].push([t,a]),s(`  Added element-side pair [${t}, ${a}] to boundary tag ${e.tag}`),r=!0;break}}else if(9===i.length&&i.includes(n)&&i.includes(o)){let a;const l=i.indexOf(n),d=i.indexOf(o);s(`  Found element ${t} containing boundary nodes. Element nodes: [${i.join(", ")}]`),s(`  Node ${n} is at index ${l}, Node ${o} is at index ${d} in the element`),0===l&&6===d||6===l&&0===d||0===l&&3===d||3===l&&0===d||3===l&&6===d||6===l&&3===d?(a=0,s(`  These nodes form the BOTTOM side (${a}) of element ${t}`)):0===l&&2===d||2===l&&0===d||0===l&&1===d||1===l&&0===d||1===l&&2===d||2===l&&1===d?(a=1,s(`  These nodes form the LEFT side (${a}) of element ${t}`)):2===l&&8===d||8===l&&2===d||2===l&&5===d||5===l&&2===d||5===l&&8===d||8===l&&5===d?(a=2,s(`  These nodes form the TOP side (${a}) of element ${t}`)):(6===l&&8===d||8===l&&6===d||6===l&&7===d||7===l&&6===d||7===l&&8===d||8===l&&7===d)&&(a=3,s(`  These nodes form the RIGHT side (${a}) of element ${t}`)),this.parsedMesh.boundaryElements[e.tag].push([t,a]),s(`  Added element-side pair [${t}, ${a}] to boundary tag ${e.tag}`),r=!0;break}}r||i(`Could not find element containing boundary nodes ${n} and ${o}. Boundary may be incomplete.`)})))}})),this.boundaryElementsProcessed=!0,this.parsedMesh.boundaryElements.length>0&&void 0===this.parsedMesh.boundaryElements[0])){const e=[];for(let t=1;t<this.parsedMesh.boundaryElements.length;t++)this.parsedMesh.boundaryElements[t]&&e.push(this.parsedMesh.boundaryElements[t]);this.parsedMesh.boundaryElements=e}}}return this.parsedMesh}}class u extends h{constructor({numElementsX:e=null,maxX:t=null,elementOrder:n="linear",parsedMesh:s=null}){super({numElementsX:e,maxX:t,numElementsY:1,maxY:0,meshDimension:"1D",elementOrder:n,parsedMesh:s}),null!==this.numElementsX&&null!==this.maxX||i("numElementsX and maxX are required parameters when generating a 1D mesh from geometry")}generateMesh(){let e=[];let t,n;if("linear"===this.elementOrder){t=this.numElementsX+1,n=(this.maxX-0)/this.numElementsX,e[0]=0;for(let s=1;s<t;s++)e[s]=e[s-1]+n}else if("quadratic"===this.elementOrder){t=2*this.numElementsX+1,n=(this.maxX-0)/this.numElementsX,e[0]=0;for(let s=1;s<t;s++)e[s]=e[s-1]+n/2}const o=this.generate1DNodalNumbering(this.numElementsX,t,this.elementOrder),i=this.findBoundaryElements();return s("Generated node X coordinates: "+JSON.stringify(e)),{nodesXCoordinates:e,totalNodesX:t,nodalNumbering:o,boundaryElements:i}}generate1DNodalNumbering(e,t,n){let s=[];if("linear"===n)for(let t=0;t<e;t++){s[t]=[];for(let e=1;e<=2;e++)s[t][e-1]=t+e}else if("quadratic"===n){let t=0;for(let n=0;n<e;n++){s[n]=[];for(let e=1;e<=3;e++)s[n][e-1]=n+e+t;t+=1}}return s}findBoundaryElements(){const e=[];for(let t=0;t<2;t++)e.push([]);return e[0].push([0,0]),e[1].push([this.numElementsX-1,1]),s("Identified boundary elements by side: "+JSON.stringify(e)),this.boundaryElementsProcessed=!0,e}}class c extends h{constructor({numElementsX:e=null,maxX:t=null,numElementsY:n=null,maxY:s=null,elementOrder:o="linear",parsedMesh:r=null}){super({numElementsX:e,maxX:t,numElementsY:n,maxY:s,meshDimension:"2D",elementOrder:o,parsedMesh:r}),null!==this.numElementsX&&null!==this.maxX&&null!==this.numElementsY&&null!==this.maxY||i("numElementsX, maxX, numElementsY, and maxY are required parameters when generating a 2D mesh from geometry")}generateMesh(){let e=[],t=[];let n,o,i,r;if("linear"===this.elementOrder){n=this.numElementsX+1,o=this.numElementsY+1,i=(this.maxX-0)/this.numElementsX,r=(this.maxY-0)/this.numElementsY,e[0]=0,t[0]=0;for(let n=1;n<o;n++)e[n]=e[0],t[n]=t[0]+n*r;for(let s=1;s<n;s++){const n=s*o;e[n]=e[0]+s*i,t[n]=t[0];for(let s=1;s<o;s++)e[n+s]=e[n],t[n+s]=t[n]+s*r}}else if("quadratic"===this.elementOrder){n=2*this.numElementsX+1,o=2*this.numElementsY+1,i=(this.maxX-0)/this.numElementsX,r=(this.maxY-0)/this.numElementsY,e[0]=0,t[0]=0;for(let n=1;n<o;n++)e[n]=e[0],t[n]=t[0]+n*r/2;for(let s=1;s<n;s++){const n=s*o;e[n]=e[0]+s*i/2,t[n]=t[0];for(let s=1;s<o;s++)e[n+s]=e[n],t[n+s]=t[n]+s*r/2}}const a=this.generate2DNodalNumbering(this.numElementsX,this.numElementsY,o,this.elementOrder),l=this.findBoundaryElements();return s("Generated node X coordinates: "+JSON.stringify(e)),s("Generated node Y coordinates: "+JSON.stringify(t)),{nodesXCoordinates:e,nodesYCoordinates:t,totalNodesX:n,totalNodesY:o,nodalNumbering:a,boundaryElements:l}}generate2DNodalNumbering(e,t,n,s){let o=0,i=[];if("linear"===s){let n=0,s=2;for(let o=0;o<e*t;o++)n+=1,i[o]=[],i[o][0]=o+s-1,i[o][1]=o+s,i[o][2]=o+s+t,i[o][3]=o+s+t+1,n===t&&(s+=1,n=0)}else if("quadratic"===s)for(let s=1;s<=e;s++)for(let e=1;e<=t;e++){i[o]=[];for(let t=1;t<=3;t++){let r=3*t-2;i[o][r-1]=n*(2*s+t-3)+2*e-1,i[o][r]=i[o][r-1]+1,i[o][r+1]=i[o][r-1]+2}o+=1}return i}findBoundaryElements(){const e=[];for(let t=0;t<4;t++)e.push([]);for(let t=0;t<this.numElementsX;t++)for(let n=0;n<this.numElementsY;n++){const s=t*this.numElementsY+n;0===n&&e[0].push([s,0]),0===t&&e[1].push([s,1]),n===this.numElementsY-1&&e[2].push([s,2]),t===this.numElementsX-1&&e[3].push([s,3])}return s("Identified boundary elements by side: "+JSON.stringify(e)),this.boundaryElementsProcessed=!0,e}}class f{constructor({meshDimension:e,elementOrder:t}){this.meshDimension=e,this.elementOrder=t}getGaussPointsAndWeights(){let e=[],t=[];return"linear"===this.elementOrder?(e[0]=.5,t[0]=1):"quadratic"===this.elementOrder&&(e[0]=(1-Math.sqrt(.6))/2,e[1]=.5,e[2]=(1+Math.sqrt(.6))/2,t[0]=5/18,t[1]=8/18,t[2]=5/18),{gaussPoints:e,gaussWeights:t}}}function p(e,t,n,r){o("Starting front propagation matrix assembly...");let a=1-r+.01;o(`eikonalViscousTerm: ${a}`),o(`eikonalActivationFlag: ${r}`);const{meshDimension:l,numElementsX:h,numElementsY:p,maxX:g,maxY:y,elementOrder:b,parsedMesh:E}=e;let $;s("Generating mesh..."),"1D"===l?$=new u({numElementsX:h,maxX:g,elementOrder:b,parsedMesh:E}):"2D"===l?$=new c({numElementsX:h,maxX:g,numElementsY:p,maxY:y,elementOrder:b,parsedMesh:E}):i("Mesh dimension must be either '1D' or '2D'.");const M=$.boundaryElementsProcessed?$.parsedMesh:$.generateMesh();let v=M.nodesXCoordinates,C=M.nodesYCoordinates,w=M.totalNodesX,N=M.totalNodesY,x=M.nodalNumbering,D=M.boundaryElements;let O,S;null!=E?(O=x.length,S=v.length,s(`Using parsed mesh with ${O} elements and ${S} nodes`)):(O=h*("2D"===l?p:1),S=w*("2D"===l?N:1),s(`Using mesh generated from geometry with ${O} elements and ${S} nodes`));let A,F,X,k,T,P,Y,R,W,B=[],I=[],q=[],j=[],V=[],L=[],G=[],z=[],U=[],K=[];for(let e=0;e<S;e++){U[e]=0,K.push([]);for(let t=0;t<S;t++)K[e][t]=0}const _=new m({meshDimension:l,elementOrder:b});let H=new f({meshDimension:l,elementOrder:b}).getGaussPointsAndWeights();I=H.gaussPoints,q=H.gaussWeights;const J=x[0].length;for(let e=0;e<O;e++){for(let t=0;t<J;t++)B[t]=x[e][t]-1;for(let e=0;e<I.length;e++)if("1D"===l){let t=_.getBasisFunctions(I[e]);j=t.basisFunction,V=t.basisFunctionDerivKsi,A=0,X=0,Y=0;for(let e=0;e<J;e++)A+=v[B[e]]*j[e],X+=v[B[e]]*V[e],Y=X;for(let e=0;e<J;e++)G[e]=V[e]/Y}else if("2D"===l)for(let t=0;t<I.length;t++){let s=_.getBasisFunctions(I[e],I[t]);j=s.basisFunction,V=s.basisFunctionDerivKsi,L=s.basisFunctionDerivEta,A=0,F=0,X=0,k=0,T=0,P=0,R=0,W=0;for(let e=0;e<J;e++)A+=v[B[e]]*j[e],F+=C[B[e]]*j[e],X+=v[B[e]]*V[e],k+=v[B[e]]*L[e],T+=C[B[e]]*V[e],P+=C[B[e]]*L[e];Y=X*P-k*T;for(let e=0;e<J;e++)G[e]=(P*V[e]-T*L[e])/Y,z[e]=(X*L[e]-k*V[e])/Y,R+=n[B[e]]*G[e],W+=n[B[e]]*z[e];for(let n=0;n<J;n++){let s=B[n];U[s]+=a*q[e]*q[t]*Y*G[n]*R+a*q[e]*q[t]*Y*z[n]*W,0!==r&&(U[s]+=r*(q[e]*q[t]*Y*j[n]*Math.sqrt(R**2+W**2)-q[e]*q[t]*Y*j[n]));for(let o=0;o<J;o++){let i=B[o];K[s][i]+=-a*q[e]*q[t]*Y*(G[n]*G[o]+z[n]*z[o]),0!==r&&(K[s][i]+=r*(-Y*R*j[n]*q[e]*q[t]/Math.sqrt(R**2+W**2+1e-8)*G[o]-Y*W*j[n]*q[e]*q[t]/Math.sqrt(R**2+W**2+1e-8)*z[o]))}}}}o("Applying generic boundary conditions...");new d(t,D,x,l,b).imposeConstantValueBoundaryConditions(U,K),o("Constant value boundary conditions applied"),s("Residuals at each node:");for(let e=0;e<U.length;e++)s(`Node ${e}: ${U[e].toExponential(6)}`);return o("Front propagation matrix assembly completed"),{jacobianMatrix:K,residualVector:U,nodesCoordinates:{nodesXCoordinates:v,nodesYCoordinates:C}}}class g{constructor(e,t,n,s,o){this.boundaryConditions=e,this.boundaryElements=t,this.nop=n,this.meshDimension=s,this.elementOrder=o}imposeConstantTempBoundaryConditions(e,t){o("Applying constant temperature boundary conditions (Dirichlet type)"),"1D"===this.meshDimension?Object.keys(this.boundaryConditions).forEach((n=>{if("constantTemp"===this.boundaryConditions[n][0]){const o=this.boundaryConditions[n][1];s(`Boundary ${n}: Applying constant temperature of ${o} K (Dirichlet condition)`),this.boundaryElements[n].forEach((([n,i])=>{if("linear"===this.elementOrder){({0:[0],1:[1]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant temperature to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=o;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}else if("quadratic"===this.elementOrder){({0:[0],2:[2]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant temperature to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=o;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}}))}})):"2D"===this.meshDimension&&Object.keys(this.boundaryConditions).forEach((n=>{if("constantTemp"===this.boundaryConditions[n][0]){const o=this.boundaryConditions[n][1];s(`Boundary ${n}: Applying constant temperature of ${o} K (Dirichlet condition)`),this.boundaryElements[n].forEach((([n,i])=>{if("linear"===this.elementOrder){({0:[0,2],1:[0,1],2:[1,3],3:[2,3]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant temperature to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=o;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}else if("quadratic"===this.elementOrder){({0:[0,3,6],1:[0,1,2],2:[2,5,8],3:[6,7,8]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant temperature to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=o;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}}))}}))}imposeConvectionBoundaryConditions(e,t,n,i,r,a,l){o("Applying convection boundary conditions (Robin type)");let d=[],m=[];Object.keys(this.boundaryConditions).forEach((e=>{const t=this.boundaryConditions[e];"convection"===t[0]&&(d[e]=t[1],m[e]=t[2])})),"1D"===this.meshDimension?Object.keys(this.boundaryConditions).forEach((n=>{if("convection"===this.boundaryConditions[n][0]){const o=d[n],i=m[n];s(`Boundary ${n}: Applying convection with heat transfer coefficient h=${o} W/(m²·K) and external temperature T∞=${i} K`),this.boundaryElements[n].forEach((([n,r])=>{let a;"linear"===this.elementOrder?a=0===r?0:1:"quadratic"===this.elementOrder&&(a=0===r?0:2);const l=this.nop[n][a]-1;s(`  - Applied convection boundary condition to node ${l+1} (element ${n+1}, local node ${a+1})`),e[l]+=-o*i,t[l][l]+=o}))}})):"2D"===this.meshDimension&&Object.keys(this.boundaryConditions).forEach((o=>{if("convection"===this.boundaryConditions[o][0]){const h=d[o],u=m[o];s(`Boundary ${o}: Applying convection with heat transfer coefficient h=${h} W/(m²·K) and external temperature T∞=${u} K`),this.boundaryElements[o].forEach((([o,d])=>{if("linear"===this.elementOrder){let m,c,f,p,g;0===d?(m=n[0],c=0,f=0,p=3,g=2):1===d?(m=0,c=n[0],f=0,p=2,g=1):2===d?(m=n[0],c=1,f=1,p=4,g=2):3===d&&(m=1,c=n[0],f=2,p=4,g=1);let y=l.getBasisFunctions(m,c),b=y.basisFunction,E=y.basisFunctionDerivKsi,$=y.basisFunctionDerivEta,M=0,v=0,C=0,w=0;const N=this.nop[o].length;for(let e=0;e<N;e++){const t=this.nop[o][e]-1;0===d||2===d?(M+=r[t]*E[e],v+=a[t]*E[e]):1!==d&&3!==d||(C+=r[t]*$[e],w+=a[t]*$[e])}let x;x=0===d||2===d?Math.sqrt(M**2+v**2):Math.sqrt(C**2+w**2);for(let n=f;n<p;n+=g){let r=this.nop[o][n]-1;s(`  - Applied convection boundary condition to node ${r+1} (element ${o+1}, local node ${n+1})`),e[r]+=-i[0]*x*b[n]*h*u;for(let e=f;e<p;e+=g){let s=this.nop[o][e]-1;t[r][s]+=-i[0]*x*b[n]*b[e]*h}}}else if("quadratic"===this.elementOrder)for(let m=0;m<3;m++){let c,f,p,g,y;0===d?(c=n[m],f=0,p=0,g=7,y=3):1===d?(c=0,f=n[m],p=0,g=3,y=1):2===d?(c=n[m],f=1,p=2,g=9,y=3):3===d&&(c=1,f=n[m],p=6,g=9,y=1);let b=l.getBasisFunctions(c,f),E=b.basisFunction,$=b.basisFunctionDerivKsi,M=b.basisFunctionDerivEta,v=0,C=0,w=0,N=0;const x=this.nop[o].length;for(let e=0;e<x;e++){const t=this.nop[o][e]-1;0===d||2===d?(v+=r[t]*$[e],C+=a[t]*$[e]):1!==d&&3!==d||(w+=r[t]*M[e],N+=a[t]*M[e])}let D;D=0===d||2===d?Math.sqrt(v**2+C**2):Math.sqrt(w**2+N**2);for(let n=p;n<g;n+=y){let r=this.nop[o][n]-1;s(`  - Applied convection boundary condition to node ${r+1} (element ${o+1}, local node ${n+1})`),e[r]+=-i[m]*D*E[n]*h*u;for(let e=p;e<g;e+=y){let s=this.nop[o][e]-1;t[r][s]+=-i[m]*D*E[n]*E[e]*h}}}}))}}))}}class y{constructor(){this.solverConfig=null,this.meshConfig={},this.boundaryConditions={},this.solverMethod="lusolve",o("FEAScriptModel instance created")}setSolverConfig(e){this.solverConfig=e,s(`Solver config set to: ${e}`)}setMeshConfig(e){this.meshConfig=e,s(`Mesh config set with dimensions: ${e.meshDimension}`)}addBoundaryCondition(e,t){this.boundaryConditions[e]=t,s(`Boundary condition added for boundary: ${e}, type: ${t[0]}`)}setSolverMethod(e){this.solverMethod=e,s(`Solver method set to: ${e}`)}solve(){if(!this.solverConfig||!this.meshConfig||!this.boundaryConditions){const e="Solver config, mesh config, and boundary conditions must be set before solving.";throw console.error(e),new Error(e)}let e=[],t=[],n=[],r=[],d={};if(o("Beginning solving process..."),console.time("totalSolvingTime"),"solidHeatTransferScript"===this.solverConfig){o(`Using solver: ${this.solverConfig}`),({jacobianMatrix:e,residualVector:t,nodesCoordinates:d}=function(e,t){o("Starting solid heat transfer matrix assembly...");const{meshDimension:n,numElementsX:r,numElementsY:a,maxX:l,maxY:d,elementOrder:h,parsedMesh:p}=e;let y;s("Generating mesh..."),"1D"===n?y=new u({numElementsX:r,maxX:l,elementOrder:h,parsedMesh:p}):"2D"===n?y=new c({numElementsX:r,maxX:l,numElementsY:a,maxY:d,elementOrder:h,parsedMesh:p}):i("Mesh dimension must be either '1D' or '2D'.");const b=y.boundaryElementsProcessed?y.parsedMesh:y.generateMesh();let E,$,M=b.nodesXCoordinates,v=b.nodesYCoordinates,C=b.totalNodesX,w=b.totalNodesY,N=b.nodalNumbering,x=b.boundaryElements;null!=p?(E=N.length,$=M.length,s(`Using parsed mesh with ${E} elements and ${$} nodes`)):(E=r*("2D"===n?a:1),$=C*("2D"===n?w:1),s(`Using mesh generated from geometry with ${E} elements and ${$} nodes`));let D,O,S,A,F,X,k,T=[],P=[],Y=[],R=[],W=[],B=[],I=[],q=[],j=[],V=[];for(let e=0;e<$;e++){j[e]=0,V.push([]);for(let t=0;t<$;t++)V[e][t]=0}const L=new m({meshDimension:n,elementOrder:h});let G=new f({meshDimension:n,elementOrder:h}).getGaussPointsAndWeights();P=G.gaussPoints,Y=G.gaussWeights;const z=N[0].length;for(let e=0;e<E;e++){for(let t=0;t<z;t++)T[t]=N[e][t]-1;for(let e=0;e<P.length;e++)if("1D"===n){let t=L.getBasisFunctions(P[e]);R=t.basisFunction,W=t.basisFunctionDerivKsi,D=0,S=0;for(let e=0;e<z;e++)D+=M[T[e]]*R[e],S+=M[T[e]]*W[e];k=S;for(let e=0;e<z;e++)I[e]=W[e]/k;for(let t=0;t<z;t++){let n=T[t];for(let s=0;s<z;s++){let o=T[s];V[n][o]+=-Y[e]*k*(I[t]*I[s])}}}else if("2D"===n)for(let t=0;t<P.length;t++){let n=L.getBasisFunctions(P[e],P[t]);R=n.basisFunction,W=n.basisFunctionDerivKsi,B=n.basisFunctionDerivEta,D=0,O=0,S=0,A=0,F=0,X=0;for(let e=0;e<z;e++)D+=M[T[e]]*R[e],O+=v[T[e]]*R[e],S+=M[T[e]]*W[e],A+=M[T[e]]*B[e],F+=v[T[e]]*W[e],X+=v[T[e]]*B[e];k=S*X-A*F;for(let e=0;e<z;e++)I[e]=(X*W[e]-F*B[e])/k,q[e]=(S*B[e]-A*W[e])/k;for(let n=0;n<z;n++){let s=T[n];for(let o=0;o<z;o++){let i=T[o];V[s][i]+=-Y[e]*Y[t]*k*(I[n]*I[o]+q[n]*q[o])}}}}o("Applying thermal boundary conditions...");const U=new g(t,x,N,n,h);return U.imposeConvectionBoundaryConditions(j,V,P,Y,M,v,L),o("Convection boundary conditions applied"),U.imposeConstantTempBoundaryConditions(j,V),o("Constant temperature boundary conditions applied"),o("Solid heat transfer matrix assembly completed"),{jacobianMatrix:V,residualVector:j,nodesCoordinates:{nodesXCoordinates:M,nodesYCoordinates:v}}}(this.meshConfig,this.boundaryConditions));n=a(this.solverMethod,e,t).solutionVector}else if("frontPropagationScript"===this.solverConfig){o(`Using solver: ${this.solverConfig}`);let s=0;const i={meshConfig:this.meshConfig,boundaryConditions:this.boundaryConditions,eikonalActivationFlag:s,solverMethod:this.solverMethod,initialSolution:r};for(;s<=1;){i.eikonalActivationFlag=s,n.length>0&&(i.initialSolution=[...n]);const o=l(p,i,100,1e-4);e=o.jacobianMatrix,t=o.residualVector,d=o.nodesCoordinates,n=o.solutionVector,s+=.2}}return console.timeEnd("totalSolvingTime"),o("Solving process completed"),{solutionVector:n,nodesCoordinates:d}}}const b=async e=>{let t={nodesXCoordinates:[],nodesYCoordinates:[],nodalNumbering:{quadElements:[],triangleElements:[]},boundaryElements:[],boundaryConditions:[],boundaryNodePairs:{},gmshV:0,ascii:!1,fltBytes:"8",totalNodesX:0,totalNodesY:0,physicalPropMap:[],elementTypes:{}},n=(await e.text()).split("\n").map((e=>e.trim())).filter((e=>""!==e&&" "!==e)),o="",i=0,r=0,a=0,l=0,d={numNodes:0},m=0,h=[],u=0,c=0,f=0,p={dim:0,tag:0,elementType:0,numElements:0},g=0,y={};for(;i<n.length;){const e=n[i];if("$MeshFormat"===e){o="meshFormat",i++;continue}if("$EndMeshFormat"===e){o="",i++;continue}if("$PhysicalNames"===e){o="physicalNames",i++;continue}if("$EndPhysicalNames"===e){o="",i++;continue}if("$Entities"===e){o="entities",i++;continue}if("$EndEntities"===e){o="",i++;continue}if("$Nodes"===e){o="nodes",i++;continue}if("$EndNodes"===e){o="",i++;continue}if("$Elements"===e){o="elements",i++;continue}if("$EndElements"===e){o="",i++;continue}const s=e.split(/\s+/).filter((e=>""!==e));if("meshFormat"===o)t.gmshV=parseFloat(s[0]),t.ascii="0"===s[1],t.fltBytes=s[2];else if("physicalNames"===o){if(s.length>=3){if(!/^\d+$/.test(s[0])){i++;continue}const e=parseInt(s[0],10),n=parseInt(s[1],10);let o=s.slice(2).join(" ");o=o.replace(/^"|"$/g,""),t.physicalPropMap.push({tag:n,dimension:e,name:o})}}else if("nodes"===o){if(0===r){r=parseInt(s[0],10),a=parseInt(s[1],10),t.nodesXCoordinates=new Array(a).fill(0),t.nodesYCoordinates=new Array(a).fill(0),i++;continue}if(l<r&&0===d.numNodes){d={dim:parseInt(s[0],10),tag:parseInt(s[1],10),parametric:parseInt(s[2],10),numNodes:parseInt(s[3],10)},h=[],m=0,u=0,i++;continue}if(m<d.numNodes){for(let e=0;e<s.length&&m<d.numNodes;e++)h.push(parseInt(s[e],10)),m++;if(m<d.numNodes){i++;continue}i++;continue}if(u<d.numNodes){const e=h[u]-1,n=parseFloat(s[0]),o=parseFloat(s[1]);t.nodesXCoordinates[e]=n,t.nodesYCoordinates[e]=o,t.totalNodesX++,t.totalNodesY++,u++,u===d.numNodes&&(l++,d={numNodes:0})}}else if("elements"===o){if(0===c){c=parseInt(s[0],10),parseInt(s[1],10),i++;continue}if(f<c&&0===p.numElements){p={dim:parseInt(s[0],10),tag:parseInt(s[1],10),elementType:parseInt(s[2],10),numElements:parseInt(s[3],10)},t.elementTypes[p.elementType]=(t.elementTypes[p.elementType]||0)+p.numElements,g=0,i++;continue}if(g<p.numElements){parseInt(s[0],10);const e=s.slice(1).map((e=>parseInt(e,10)));if(1===p.elementType||8===p.elementType){const n=p.tag;y[n]||(y[n]=[]),y[n].push(e),t.boundaryNodePairs[n]||(t.boundaryNodePairs[n]=[]),t.boundaryNodePairs[n].push(e)}else 2===p.elementType?t.nodalNumbering.triangleElements.push(e):(3===p.elementType||10===p.elementType)&&t.nodalNumbering.quadElements.push(e);g++,g===p.numElements&&(f++,p={numElements:0})}}i++}return t.physicalPropMap.forEach((e=>{if(1===e.dimension){const n=y[e.tag]||[];n.length>0&&t.boundaryConditions.push({name:e.name,tag:e.tag,nodes:n})}})),s(`Parsed boundary node pairs by physical tag: ${JSON.stringify(t.boundaryNodePairs)}. These pairs will be used to identify boundary elements in the mesh.`),t};function E(e,t,n,s,o,i,r="structured"){const{nodesXCoordinates:a,nodesYCoordinates:l}=t;if("1D"===s&&"line"===o){let t;t=e.length>0&&Array.isArray(e[0])?e.map((e=>e[0])):e;let s=Array.from(a),o={x:s,y:t,mode:"lines",type:"scatter",line:{color:"rgb(219, 64, 82)",width:2},name:"Solution"},r=Math.min(window.innerWidth,700),l=Math.max(...s),d=r/l,m={title:`line plot - ${n}`,width:Math.max(d*l,400),height:350,xaxis:{title:"x"},yaxis:{title:"Solution"},margin:{l:70,r:40,t:50,b:50}};Plotly.newPlot(i,[o],m,{responsive:!0})}else if("2D"===s&&"contour"===o){const t="structured"===r,s=new Set(a).size,d=new Set(l).size;let m;m=Array.isArray(e[0])?e.map((e=>e[0])):e;let h=Math.min(window.innerWidth,700),u=Math.max(...a),c=Math.max(...l)/u,f=Math.min(h,600),p={title:`${o} plot - ${n}`,width:f,height:f*c*.8,xaxis:{title:"x"},yaxis:{title:"y"},margin:{l:50,r:50,t:50,b:50},hovermode:"closest"};if(t){const t=s,n=d;math.reshape(Array.from(a),[t,n]);let o=math.reshape(Array.from(l),[t,n]),r=math.reshape(Array.from(e),[t,n]),m=math.transpose(r),h=[];for(let e=0;e<t*n;e+=n){let t=a[e];h.push(t)}let u={z:m,type:"contour",contours:{coloring:"heatmap",showlabels:!1},colorbar:{title:"Solution"},x:h,y:o[0],name:"Solution Field"};Plotly.newPlot(i,[u],p,{responsive:!0})}else{let e={x:a,y:l,z:m,type:"contour",contours:{coloring:"heatmap",showlabels:!1},colorbar:{title:"Solution"},name:"Solution Field"};Plotly.newPlot(i,[e],p,{responsive:!0})}}}
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */const $=Symbol("Comlink.proxy"),M=Symbol("Comlink.endpoint"),v=Symbol("Comlink.releaseProxy"),C=Symbol("Comlink.finalizer"),w=Symbol("Comlink.thrown"),N=e=>"object"==typeof e&&null!==e||"function"==typeof e,x=new Map([["proxy",{canHandle:e=>N(e)&&e[$],serialize(e){const{port1:t,port2:n}=new MessageChannel;return D(e,t),[n,[n]]},deserialize:e=>(e.start(),S(e))}],["throw",{canHandle:e=>N(e)&&w in e,serialize({value:e}){let t;return t=e instanceof Error?{isError:!0,value:{message:e.message,name:e.name,stack:e.stack}}:{isError:!1,value:e},[t,[]]},deserialize(e){if(e.isError)throw Object.assign(new Error(e.value.message),e.value);throw e.value}}]]);function D(e,t=globalThis,n=["*"]){t.addEventListener("message",(function s(o){if(!o||!o.data)return;if(!function(e,t){for(const n of e){if(t===n||"*"===n)return!0;if(n instanceof RegExp&&n.test(t))return!0}return!1}(n,o.origin))return void console.warn(`Invalid origin '${o.origin}' for comlink proxy`);const{id:i,type:r,path:a}=Object.assign({path:[]},o.data),l=(o.data.argumentList||[]).map(W);let d;try{const t=a.slice(0,-1).reduce(((e,t)=>e[t]),e),n=a.reduce(((e,t)=>e[t]),e);switch(r){case"GET":d=n;break;case"SET":t[a.slice(-1)[0]]=W(o.data.value),d=!0;break;case"APPLY":d=n.apply(t,l);break;case"CONSTRUCT":d=function(e){return Object.assign(e,{[$]:!0})}(new n(...l));break;case"ENDPOINT":{const{port1:t,port2:n}=new MessageChannel;D(e,n),d=function(e,t){return Y.set(e,t),e}(t,[t])}break;case"RELEASE":d=void 0;break;default:return}}catch(e){d={value:e,[w]:0}}Promise.resolve(d).catch((e=>({value:e,[w]:0}))).then((n=>{const[o,a]=R(n);t.postMessage(Object.assign(Object.assign({},o),{id:i}),a),"RELEASE"===r&&(t.removeEventListener("message",s),O(t),C in e&&"function"==typeof e[C]&&e[C]())})).catch((e=>{const[n,s]=R({value:new TypeError("Unserializable return value"),[w]:0});t.postMessage(Object.assign(Object.assign({},n),{id:i}),s)}))})),t.start&&t.start()}function O(e){(function(e){return"MessagePort"===e.constructor.name})(e)&&e.close()}function S(e,t){const n=new Map;return e.addEventListener("message",(function(e){const{data:t}=e;if(!t||!t.id)return;const s=n.get(t.id);if(s)try{s(t)}finally{n.delete(t.id)}})),T(e,n,[],t)}function A(e){if(e)throw new Error("Proxy has been released and is not useable")}function F(e){return B(e,new Map,{type:"RELEASE"}).then((()=>{O(e)}))}const X=new WeakMap,k="FinalizationRegistry"in globalThis&&new FinalizationRegistry((e=>{const t=(X.get(e)||0)-1;X.set(e,t),0===t&&F(e)}));function T(e,t,n=[],s=function(){}){let o=!1;const i=new Proxy(s,{get(s,r){if(A(o),r===v)return()=>{!function(e){k&&k.unregister(e)}(i),F(e),t.clear(),o=!0};if("then"===r){if(0===n.length)return{then:()=>i};const s=B(e,t,{type:"GET",path:n.map((e=>e.toString()))}).then(W);return s.then.bind(s)}return T(e,t,[...n,r])},set(s,i,r){A(o);const[a,l]=R(r);return B(e,t,{type:"SET",path:[...n,i].map((e=>e.toString())),value:a},l).then(W)},apply(s,i,r){A(o);const a=n[n.length-1];if(a===M)return B(e,t,{type:"ENDPOINT"}).then(W);if("bind"===a)return T(e,t,n.slice(0,-1));const[l,d]=P(r);return B(e,t,{type:"APPLY",path:n.map((e=>e.toString())),argumentList:l},d).then(W)},construct(s,i){A(o);const[r,a]=P(i);return B(e,t,{type:"CONSTRUCT",path:n.map((e=>e.toString())),argumentList:r},a).then(W)}});return function(e,t){const n=(X.get(t)||0)+1;X.set(t,n),k&&k.register(e,t,e)}(i,e),i}function P(e){const t=e.map(R);return[t.map((e=>e[0])),(n=t.map((e=>e[1])),Array.prototype.concat.apply([],n))];var n}const Y=new WeakMap;function R(e){for(const[t,n]of x)if(n.canHandle(e)){const[s,o]=n.serialize(e);return[{type:"HANDLER",name:t,value:s},o]}return[{type:"RAW",value:e},Y.get(e)||[]]}function W(e){switch(e.type){case"HANDLER":return x.get(e.name).deserialize(e.value);case"RAW":return e.value}}function B(e,t,n,s){return new Promise((o=>{const i=new Array(4).fill(0).map((()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16))).join("-");t.set(i,o),e.start&&e.start(),e.postMessage(Object.assign({id:i},n),s)}))}class I{constructor(){this.worker=null,this.feaWorker=null,this.isReady=!1,this._initWorker()}async _initWorker(){try{this.worker=new Worker(new URL("./wrapperScript.js",import.meta.url),{type:"module"}),this.worker.onerror=e=>{console.error("FEAScriptWorker: Worker error:",e)};const e=S(this.worker);this.feaWorker=await new e,this.isReady=!0}catch(e){throw console.error("Failed to initialize worker",e),e}}async _ensureReady(){return this.isReady?Promise.resolve():new Promise(((e,t)=>{let n=0;const s=()=>{n++,this.isReady?e():n>=50?t(new Error("Timeout waiting for worker to be ready")):setTimeout(s,1e3)};s()}))}async setSolverConfig(e){return await this._ensureReady(),o(`FEAScriptWorker: Setting solver config to: ${e}`),this.feaWorker.setSolverConfig(e)}async setMeshConfig(e){return await this._ensureReady(),o("FEAScriptWorker: Setting mesh config"),this.feaWorker.setMeshConfig(e)}async addBoundaryCondition(e,t){return await this._ensureReady(),o(`FEAScriptWorker: Adding boundary condition for boundary: ${e}`),this.feaWorker.addBoundaryCondition(e,t)}async setSolverMethod(e){return await this._ensureReady(),o(`FEAScriptWorker: Setting solver method to: ${e}`),this.feaWorker.setSolverMethod(e)}async solve(){await this._ensureReady(),o("FEAScriptWorker: Requesting solution from worker...");const e=performance.now(),t=await this.feaWorker.solve();return o(`FEAScriptWorker: Solution completed in ${((performance.now()-e)/1e3).toFixed(2)}s`),t}async getModelInfo(){return await this._ensureReady(),this.feaWorker.getModelInfo()}async ping(){return await this._ensureReady(),this.feaWorker.ping()}terminate(){this.worker&&(this.worker.terminate(),this.worker=null,this.feaWorker=null,this.isReady=!1)}}const q="0.1.2";export{y as FEAScriptModel,I as FEAScriptWorker,q as VERSION,b as importGmshQuadTri,n as logSystem,E as plotSolution,r as printVersion};
//# sourceMappingURL=feascript.esm.js.map
