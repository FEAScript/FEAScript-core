function e(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n]*e[n];return t=Math.sqrt(t),t}function t(e,t,n,o={}){const{maxIterations:s=1e3,tolerance:i=1e-6}=o,r=e.length;let a=[...n],l=new Array(r);for(let n=0;n<s;n++){for(let n=0;n<r;n++){let o=0;for(let t=0;t<r;t++)n!==t&&(o+=e[n][t]*a[t]);l[n]=(t[n]-o)/e[n][n]}let o=0;for(let e=0;e<r;e++)o=Math.max(o,Math.abs(l[e]-a[e]));if(a=[...l],o<i)return{solutionVector:a,iterations:n+1,converged:!0}}return{solutionVector:a,iterations:s,converged:!1}}let n="basic";function o(e){"basic"!==e&&"debug"!==e?(console.log("%c[WARN] Invalid log level: "+e+". Using basic instead.","color: #FFC107; font-weight: bold;"),n="basic"):(n=e,i(`Log level set to: ${e}`))}function s(e){"debug"===n&&console.log("%c[DEBUG] "+e,"color: #2196F3; font-weight: bold;")}function i(e){console.log("%c[INFO] "+e,"color: #4CAF50; font-weight: bold;")}function r(e){console.log("%c[ERROR] "+e,"color: #F44336; font-weight: bold;")}
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const a=Symbol("Comlink.proxy"),l=Symbol("Comlink.endpoint"),d=Symbol("Comlink.releaseProxy"),c=Symbol("Comlink.finalizer"),u=Symbol("Comlink.thrown"),m=e=>"object"==typeof e&&null!==e||"function"==typeof e,h=new Map([["proxy",{canHandle:e=>m(e)&&e[a],serialize(e){const{port1:t,port2:n}=new MessageChannel;return f(e,t),[n,[n]]},deserialize:e=>(e.start(),b(e))}],["throw",{canHandle:e=>m(e)&&u in e,serialize({value:e}){let t;return t=e instanceof Error?{isError:!0,value:{message:e.message,name:e.name,stack:e.stack}}:{isError:!1,value:e},[t,[]]},deserialize(e){if(e.isError)throw Object.assign(new Error(e.value.message),e.value);throw e.value}}]]);function f(e,t=globalThis,n=["*"]){t.addEventListener("message",(function o(s){if(!s||!s.data)return;if(!function(e,t){for(const n of e){if(t===n||"*"===n)return!0;if(n instanceof RegExp&&n.test(t))return!0}return!1}(n,s.origin))return void console.warn(`Invalid origin '${s.origin}' for comlink proxy`);const{id:i,type:r,path:l}=Object.assign({path:[]},s.data),d=(s.data.argumentList||[]).map(F);let m;try{const t=l.slice(0,-1).reduce(((e,t)=>e[t]),e),n=l.reduce(((e,t)=>e[t]),e);switch(r){case"GET":m=n;break;case"SET":t[l.slice(-1)[0]]=F(s.data.value),m=!0;break;case"APPLY":m=n.apply(t,d);break;case"CONSTRUCT":m=function(e){return Object.assign(e,{[a]:!0})}(new n(...d));break;case"ENDPOINT":{const{port1:t,port2:n}=new MessageChannel;f(e,n),m=function(e,t){return $.set(e,t),e}(t,[t])}break;case"RELEASE":m=void 0;break;default:return}}catch(e){m={value:e,[u]:0}}Promise.resolve(m).catch((e=>({value:e,[u]:0}))).then((n=>{const[s,a]=D(n);t.postMessage(Object.assign(Object.assign({},s),{id:i}),a),"RELEASE"===r&&(t.removeEventListener("message",o),p(t),c in e&&"function"==typeof e[c]&&e[c]())})).catch((e=>{const[n,o]=D({value:new TypeError("Unserializable return value"),[u]:0});t.postMessage(Object.assign(Object.assign({},n),{id:i}),o)}))})),t.start&&t.start()}function p(e){(function(e){return"MessagePort"===e.constructor.name})(e)&&e.close()}function b(e,t){const n=new Map;return e.addEventListener("message",(function(e){const{data:t}=e;if(!t||!t.id)return;const o=n.get(t.id);if(o)try{o(t)}finally{n.delete(t.id)}})),C(e,n,[],t)}function g(e){if(e)throw new Error("Proxy has been released and is not useable")}function y(e){return A(e,new Map,{type:"RELEASE"}).then((()=>{p(e)}))}const E=new WeakMap,v="FinalizationRegistry"in globalThis&&new FinalizationRegistry((e=>{const t=(E.get(e)||0)-1;E.set(e,t),0===t&&y(e)}));function C(e,t,n=[],o=function(){}){let s=!1;const i=new Proxy(o,{get(o,r){if(g(s),r===d)return()=>{!function(e){v&&v.unregister(e)}(i),y(e),t.clear(),s=!0};if("then"===r){if(0===n.length)return{then:()=>i};const o=A(e,t,{type:"GET",path:n.map((e=>e.toString()))}).then(F);return o.then.bind(o)}return C(e,t,[...n,r])},set(o,i,r){g(s);const[a,l]=D(r);return A(e,t,{type:"SET",path:[...n,i].map((e=>e.toString())),value:a},l).then(F)},apply(o,i,r){g(s);const a=n[n.length-1];if(a===l)return A(e,t,{type:"ENDPOINT"}).then(F);if("bind"===a)return C(e,t,n.slice(0,-1));const[d,c]=M(r);return A(e,t,{type:"APPLY",path:n.map((e=>e.toString())),argumentList:d},c).then(F)},construct(o,i){g(s);const[r,a]=M(i);return A(e,t,{type:"CONSTRUCT",path:n.map((e=>e.toString())),argumentList:r},a).then(F)}});return function(e,t){const n=(E.get(t)||0)+1;E.set(t,n),v&&v.register(e,t,e)}(i,e),i}function M(e){const t=e.map(D);return[t.map((e=>e[0])),(n=t.map((e=>e[1])),Array.prototype.concat.apply([],n))];var n}const $=new WeakMap;function D(e){for(const[t,n]of h)if(n.canHandle(e)){const[o,s]=n.serialize(e);return[{type:"HANDLER",name:t,value:o},s]}return[{type:"RAW",value:e},$.get(e)||[]]}function F(e){switch(e.type){case"HANDLER":return h.get(e.name).deserialize(e.value);case"RAW":return e.value}}function A(e,t,n,o){return new Promise((s=>{const i=new Array(4).fill(0).map((()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16))).join("-");t.set(i,s),e.start&&e.start(),e.postMessage(Object.assign({id:i},n),o)}))}function x(e,n,o,a={}){const{maxIterations:l=1e4,tolerance:d=.001}=a;let c=[],u=!0,m=0;if(i(`Solving system using ${e}...`),console.time("systemSolving"),"lusolve"===e){const e=math.sparse(n),t=math.slu(e,1,1);let s=math.lusolve(t,o);c=math.squeeze(s).valueOf()}else if("jacobi"===e){const e=t(n,o,new Array(o.length).fill(0),{maxIterations:l,tolerance:d});e.converged?s(`Jacobi method converged in ${e.iterations} iterations`):r(`Jacobi method did not converge after ${e.iterations} iterations`),c=e.solutionVector,u=e.converged,m=e.iterations}else r(`Unknown solver method: ${e}`);return console.timeEnd("systemSolving"),i("System solved successfully"),{solutionVector:c,converged:u,iterations:m}}async function w(e,n,o,s={}){const{maxIterations:a=1e4,tolerance:l=.001}=s;i(`Solving system using ${e}...`),console.time("systemSolving");const d=Array.isArray(n)?n:n?.toArray?.()??n,c=Array.isArray(o)?o:o?.toArray?.()??o;let u,m=null,h=null,f=[],p=!0;if("jacobi-gpu"===e){m=await async function(){const e=new Worker(new URL("../workers/webgpuWorkerScript.js",import.meta.url),{type:"module"}),t=b(e);return await t.initialize(),{computeEngine:t,worker:e}}(),h=m.computeEngine;const e=new Array(c.length).fill(0);let n;if(h&&"function"==typeof h.webgpuJacobiSolver)n=await h.webgpuJacobiSolver(d,c,e,a,l);else{warnLog("Falling back to CPU Jacobi: computeEngine.webgpuJacobiSolver not available");const o=t(d,c,e,{maxIterations:a,tolerance:l});n={x:o.solutionVector,converged:o.converged,iterations:o.iterations}}Array.isArray(n)?f=n:(f=n?.x??n?.solutionVector??[],p=n?.converged??!0,u=n?.iterations)}else r(`Unknown solver method: ${e}`);return console.timeEnd("systemSolving"),i(`System solved successfully (${e})`),m&&(await(h?.destroy?.().catch((()=>{}))),m.worker.terminate()),{solutionVector:f,converged:p,iterations:u}}class N{constructor({meshDimension:e,elementOrder:t}){this.meshDimension=e,this.elementOrder=t}getBasisFunctions(e,t=null){let n=[],o=[],s=[];if("1D"===this.meshDimension)"linear"===this.elementOrder?(n[0]=1-e,n[1]=e,o[0]=-1,o[1]=1):"quadratic"===this.elementOrder&&(n[0]=1-3*e+2*e**2,n[1]=4*e-4*e**2,n[2]=2*e**2-e,o[0]=4*e-3,o[1]=4-8*e,o[2]=4*e-1);else if("2D"===this.meshDimension){if(null===t)return void r("Eta coordinate is required for 2D elements");if("linear"===this.elementOrder){function i(e){return 1-e}n[0]=i(e)*i(t),n[1]=i(e)*t,n[2]=e*i(t),n[3]=e*t,o[0]=-1*i(t),o[1]=-1*t,o[2]=1*i(t),o[3]=1*t,s[0]=-1*i(e),s[1]=1*i(e),s[2]=-1*e,s[3]=1*e}else if("quadratic"===this.elementOrder){function a(e){return 2*e**2-3*e+1}function l(e){return-4*e**2+4*e}function d(e){return 2*e**2-e}function c(e){return 4*e-3}function u(e){return-8*e+4}function m(e){return 4*e-1}n[0]=a(e)*a(t),n[1]=a(e)*l(t),n[2]=a(e)*d(t),n[3]=l(e)*a(t),n[4]=l(e)*l(t),n[5]=l(e)*d(t),n[6]=d(e)*a(t),n[7]=d(e)*l(t),n[8]=d(e)*d(t),o[0]=c(e)*a(t),o[1]=c(e)*l(t),o[2]=c(e)*d(t),o[3]=u(e)*a(t),o[4]=u(e)*l(t),o[5]=u(e)*d(t),o[6]=m(e)*a(t),o[7]=m(e)*l(t),o[8]=m(e)*d(t),s[0]=a(e)*c(t),s[1]=a(e)*u(t),s[2]=a(e)*m(t),s[3]=l(e)*c(t),s[4]=l(e)*u(t),s[5]=l(e)*m(t),s[6]=d(e)*c(t),s[7]=d(e)*u(t),s[8]=d(e)*m(t)}}return{basisFunction:n,basisFunctionDerivKsi:o,basisFunctionDerivEta:s}}}class S{constructor({numElementsX:e=null,maxX:t=null,numElementsY:n=null,maxY:o=null,meshDimension:s=null,elementOrder:r="linear",parsedMesh:a=null}){this.numElementsX=e,this.numElementsY=n,this.maxX=t,this.maxY=o,this.meshDimension=s,this.elementOrder=r,this.parsedMesh=a,this.boundaryElementsProcessed=!1,this.parsedMesh&&(i("Using pre-parsed mesh from gmshReader data for mesh generation."),this.parseMeshFromGmsh())}parseMeshFromGmsh(){if(this.parsedMesh.nodalNumbering||r("No valid nodal numbering found in the parsed mesh."),"object"==typeof this.parsedMesh.nodalNumbering&&!Array.isArray(this.parsedMesh.nodalNumbering)){const e=this.parsedMesh.nodalNumbering.quadElements||[];if(this.parsedMesh.nodalNumbering.triangleElements,s("Initial parsed mesh nodal numbering from GMSH format: "+JSON.stringify(this.parsedMesh.nodalNumbering)),this.parsedMesh.elementTypes[3]||this.parsedMesh.elementTypes[10]){const t=[];for(let n=0;n<e.length;n++){const o=e[n],s=new Array(o.length);4===o.length?(s[0]=o[0],s[1]=o[3],s[2]=o[1],s[3]=o[2]):9===o.length&&(s[0]=o[0],s[1]=o[7],s[2]=o[3],s[3]=o[4],s[4]=o[8],s[5]=o[6],s[6]=o[1],s[7]=o[5],s[8]=o[2]),t.push(s)}this.parsedMesh.nodalNumbering=t}else this.parsedMesh.elementTypes[2]&&r("Element type is neither triangle nor quad; mapping for this type is not implemented yet.");if(s("Nodal numbering after mapping from GMSH to FEAScript format: "+JSON.stringify(this.parsedMesh.nodalNumbering)),this.parsedMesh.physicalPropMap&&this.parsedMesh.boundaryElements){if(Array.isArray(this.parsedMesh.boundaryElements)&&this.parsedMesh.boundaryElements.length>0&&void 0===this.parsedMesh.boundaryElements[0]){const e=[];for(let t=1;t<this.parsedMesh.boundaryElements.length;t++)this.parsedMesh.boundaryElements[t]&&e.push(this.parsedMesh.boundaryElements[t]);this.parsedMesh.boundaryElements=e}if(this.parsedMesh.boundaryNodePairs&&!this.parsedMesh.boundaryElementsProcessed&&(this.parsedMesh.boundaryElements=[],this.parsedMesh.physicalPropMap.forEach((e=>{if(1===e.dimension){const t=this.parsedMesh.boundaryNodePairs[e.tag]||[];t.length>0&&(this.parsedMesh.boundaryElements[e.tag]||(this.parsedMesh.boundaryElements[e.tag]=[]),t.forEach((t=>{const n=t[0],o=t[1];s(`Processing boundary node pair: [${n}, ${o}] for boundary ${e.tag} (${e.name||"unnamed"})`);let i=!1;for(let t=0;t<this.parsedMesh.nodalNumbering.length;t++){const r=this.parsedMesh.nodalNumbering[t];if(4===r.length){if(r.includes(n)&&r.includes(o)){let a;const l=r.indexOf(n),d=r.indexOf(o);s(`  Found element ${t} containing boundary nodes. Element nodes: [${r.join(", ")}]`),s(`  Node ${n} is at index ${l}, Node ${o} is at index ${d} in the element`),0===l&&2===d||2===l&&0===d?(a=0,s(`  These nodes form the BOTTOM side (${a}) of element ${t}`)):0===l&&1===d||1===l&&0===d?(a=1,s(`  These nodes form the LEFT side (${a}) of element ${t}`)):1===l&&3===d||3===l&&1===d?(a=2,s(`  These nodes form the TOP side (${a}) of element ${t}`)):(2===l&&3===d||3===l&&2===d)&&(a=3,s(`  These nodes form the RIGHT side (${a}) of element ${t}`)),this.parsedMesh.boundaryElements[e.tag].push([t,a]),s(`  Added element-side pair [${t}, ${a}] to boundary tag ${e.tag}`),i=!0;break}}else if(9===r.length&&r.includes(n)&&r.includes(o)){let a;const l=r.indexOf(n),d=r.indexOf(o);s(`  Found element ${t} containing boundary nodes. Element nodes: [${r.join(", ")}]`),s(`  Node ${n} is at index ${l}, Node ${o} is at index ${d} in the element`),0===l&&6===d||6===l&&0===d||0===l&&3===d||3===l&&0===d||3===l&&6===d||6===l&&3===d?(a=0,s(`  These nodes form the BOTTOM side (${a}) of element ${t}`)):0===l&&2===d||2===l&&0===d||0===l&&1===d||1===l&&0===d||1===l&&2===d||2===l&&1===d?(a=1,s(`  These nodes form the LEFT side (${a}) of element ${t}`)):2===l&&8===d||8===l&&2===d||2===l&&5===d||5===l&&2===d||5===l&&8===d||8===l&&5===d?(a=2,s(`  These nodes form the TOP side (${a}) of element ${t}`)):(6===l&&8===d||8===l&&6===d||6===l&&7===d||7===l&&6===d||7===l&&8===d||8===l&&7===d)&&(a=3,s(`  These nodes form the RIGHT side (${a}) of element ${t}`)),this.parsedMesh.boundaryElements[e.tag].push([t,a]),s(`  Added element-side pair [${t}, ${a}] to boundary tag ${e.tag}`),i=!0;break}}i||r(`Could not find element containing boundary nodes ${n} and ${o}. Boundary may be incomplete.`)})))}})),this.boundaryElementsProcessed=!0,this.parsedMesh.boundaryElements.length>0&&void 0===this.parsedMesh.boundaryElements[0])){const e=[];for(let t=1;t<this.parsedMesh.boundaryElements.length;t++)this.parsedMesh.boundaryElements[t]&&e.push(this.parsedMesh.boundaryElements[t]);this.parsedMesh.boundaryElements=e}}}return this.parsedMesh}}class O extends S{constructor({numElementsX:e=null,maxX:t=null,elementOrder:n="linear",parsedMesh:o=null}){super({numElementsX:e,maxX:t,numElementsY:1,maxY:0,meshDimension:"1D",elementOrder:n,parsedMesh:o}),null!==this.numElementsX&&null!==this.maxX||r("numElementsX and maxX are required parameters when generating a 1D mesh from geometry")}generateMesh(){let e=[];let t,n;if("linear"===this.elementOrder){t=this.numElementsX+1,n=(this.maxX-0)/this.numElementsX,e[0]=0;for(let o=1;o<t;o++)e[o]=e[o-1]+n}else if("quadratic"===this.elementOrder){t=2*this.numElementsX+1,n=(this.maxX-0)/this.numElementsX,e[0]=0;for(let o=1;o<t;o++)e[o]=e[o-1]+n/2}const o=this.generate1DNodalNumbering(this.numElementsX,t,this.elementOrder),i=this.findBoundaryElements();return s("Generated node X coordinates: "+JSON.stringify(e)),{nodesXCoordinates:e,totalNodesX:t,nodalNumbering:o,boundaryElements:i}}generate1DNodalNumbering(e,t,n){let o=[];if("linear"===n)for(let t=0;t<e;t++){o[t]=[];for(let e=1;e<=2;e++)o[t][e-1]=t+e}else if("quadratic"===n){let t=0;for(let n=0;n<e;n++){o[n]=[];for(let e=1;e<=3;e++)o[n][e-1]=n+e+t;t+=1}}return o}findBoundaryElements(){const e=[];for(let t=0;t<2;t++)e.push([]);return e[0].push([0,0]),e[1].push([this.numElementsX-1,1]),s("Identified boundary elements by side: "+JSON.stringify(e)),this.boundaryElementsProcessed=!0,e}}class V extends S{constructor({numElementsX:e=null,maxX:t=null,numElementsY:n=null,maxY:o=null,elementOrder:s="linear",parsedMesh:i=null}){super({numElementsX:e,maxX:t,numElementsY:n,maxY:o,meshDimension:"2D",elementOrder:s,parsedMesh:i}),i||null!==this.numElementsX&&null!==this.maxX&&null!==this.numElementsY&&null!==this.maxY||r("numElementsX, maxX, numElementsY, and maxY are required parameters when generating a 2D mesh from geometry")}generateMesh(){let e=[],t=[];let n,o,i,r;if("linear"===this.elementOrder){n=this.numElementsX+1,o=this.numElementsY+1,i=(this.maxX-0)/this.numElementsX,r=(this.maxY-0)/this.numElementsY,e[0]=0,t[0]=0;for(let n=1;n<o;n++)e[n]=e[0],t[n]=t[0]+n*r;for(let s=1;s<n;s++){const n=s*o;e[n]=e[0]+s*i,t[n]=t[0];for(let s=1;s<o;s++)e[n+s]=e[n],t[n+s]=t[n]+s*r}}else if("quadratic"===this.elementOrder){n=2*this.numElementsX+1,o=2*this.numElementsY+1,i=(this.maxX-0)/this.numElementsX,r=(this.maxY-0)/this.numElementsY,e[0]=0,t[0]=0;for(let n=1;n<o;n++)e[n]=e[0],t[n]=t[0]+n*r/2;for(let s=1;s<n;s++){const n=s*o;e[n]=e[0]+s*i/2,t[n]=t[0];for(let s=1;s<o;s++)e[n+s]=e[n],t[n+s]=t[n]+s*r/2}}const a=this.generate2DNodalNumbering(this.numElementsX,this.numElementsY,o,this.elementOrder),l=this.findBoundaryElements();return s("Generated node X coordinates: "+JSON.stringify(e)),s("Generated node Y coordinates: "+JSON.stringify(t)),{nodesXCoordinates:e,nodesYCoordinates:t,totalNodesX:n,totalNodesY:o,nodalNumbering:a,boundaryElements:l}}generate2DNodalNumbering(e,t,n,o){let s=0,i=[];if("linear"===o){let n=0,o=2;for(let s=0;s<e*t;s++)n+=1,i[s]=[],i[s][0]=s+o-1,i[s][1]=s+o,i[s][2]=s+o+t,i[s][3]=s+o+t+1,n===t&&(o+=1,n=0)}else if("quadratic"===o)for(let o=1;o<=e;o++)for(let e=1;e<=t;e++){i[s]=[];for(let t=1;t<=3;t++){let r=3*t-2;i[s][r-1]=n*(2*o+t-3)+2*e-1,i[s][r]=i[s][r-1]+1,i[s][r+1]=i[s][r-1]+2}s+=1}return i}findBoundaryElements(){const e=[];for(let t=0;t<4;t++)e.push([]);for(let t=0;t<this.numElementsX;t++)for(let n=0;n<this.numElementsY;n++){const o=t*this.numElementsY+n;0===n&&e[0].push([o,0]),0===t&&e[1].push([o,1]),n===this.numElementsY-1&&e[2].push([o,2]),t===this.numElementsX-1&&e[3].push([o,3])}return s("Identified boundary elements by side: "+JSON.stringify(e)),this.boundaryElementsProcessed=!0,e}}class X{constructor({meshDimension:e,elementOrder:t}){this.meshDimension=e,this.elementOrder=t}getGaussPointsAndWeights(){let e=[],t=[];return"linear"===this.elementOrder?(e[0]=.5,t[0]=1):"quadratic"===this.elementOrder&&(e[0]=(1-Math.sqrt(.6))/2,e[1]=.5,e[2]=(1+Math.sqrt(.6))/2,t[0]=5/18,t[1]=8/18,t[2]=5/18),{gaussPoints:e,gaussWeights:t}}}function k(e){const{meshDimension:t,numElementsX:n,numElementsY:o,maxX:i,maxY:a,elementOrder:l,parsedMesh:d}=e;let c;"1D"===t?c=new O({numElementsX:n,maxX:i,elementOrder:l,parsedMesh:d}):"2D"===t?c=new V({numElementsX:n,maxX:i,numElementsY:o,maxY:a,elementOrder:l,parsedMesh:d}):r("Mesh dimension must be either '1D' or '2D'.");const u=c.boundaryElementsProcessed?c.parsedMesh:c.generateMesh();let m=u.nodesXCoordinates,h=u.nodesYCoordinates,f=u.totalNodesX,p=u.totalNodesY,b=u.nodalNumbering,g=u.boundaryElements;let y,E;return null!=d?(y=b.length,E=m.length,s(`Using parsed mesh with ${y} elements and ${E} nodes`)):(y=n*("2D"===t?o:1),E=f*("2D"===t?p:1),s(`Using mesh generated from geometry with ${y} elements and ${E} nodes`)),{nodesXCoordinates:m,nodesYCoordinates:h,totalNodesX:f,totalNodesY:p,nop:b,boundaryElements:g,totalElements:y,totalNodes:E,meshDimension:t,elementOrder:l}}function T(e){const{totalNodes:t,nop:n,meshDimension:o,elementOrder:s}=e;let i=[],r=[];for(let e=0;e<t;e++){i[e]=0,r.push([]);for(let n=0;n<t;n++)r[e][n]=0}const a=new N({meshDimension:o,elementOrder:s});let l=new X({meshDimension:o,elementOrder:s}).getGaussPointsAndWeights();return{residualVector:i,jacobianMatrix:r,localToGlobalMap:[],basisFunctions:a,gaussPoints:l.gaussPoints,gaussWeights:l.gaussWeights,numNodes:n[0].length}}function P(e){const{basisFunction:t,basisFunctionDerivKsi:n,nodesXCoordinates:o,localToGlobalMap:s,numNodes:i}=e;let r=0,a=0;for(let e=0;e<i;e++)r+=o[s[e]]*t[e],a+=o[s[e]]*n[e];let l=a,d=[];for(let e=0;e<i;e++)d[e]=n[e]/l;return{xCoordinates:r,detJacobian:l,basisFunctionDerivX:d}}function R(e){const{basisFunction:t,basisFunctionDerivKsi:n,basisFunctionDerivEta:o,nodesXCoordinates:s,nodesYCoordinates:i,localToGlobalMap:r,numNodes:a}=e;let l=0,d=0,c=0,u=0,m=0,h=0;for(let e=0;e<a;e++)l+=s[r[e]]*t[e],d+=i[r[e]]*t[e],c+=s[r[e]]*n[e],u+=s[r[e]]*o[e],m+=i[r[e]]*n[e],h+=i[r[e]]*o[e];let f=c*h-u*m,p=[],b=[];for(let e=0;e<a;e++)p[e]=(h*n[e]-m*o[e])/f,b[e]=(c*o[e]-u*n[e])/f;return{xCoordinates:l,yCoordinates:d,detJacobian:f,basisFunctionDerivX:p,basisFunctionDerivY:b}}class Y{constructor(e,t,n,o,s){this.boundaryConditions=e,this.boundaryElements=t,this.nop=n,this.meshDimension=o,this.elementOrder=s}imposeConstantTempBoundaryConditions(e,t){"1D"===this.meshDimension?Object.keys(this.boundaryConditions).forEach((n=>{if("constantTemp"===this.boundaryConditions[n][0]){const o=this.boundaryConditions[n][1];s(`Boundary ${n}: Applying constant temperature of ${o} K (Dirichlet condition)`),this.boundaryElements[n].forEach((([n,i])=>{if("linear"===this.elementOrder){({0:[0],1:[1]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant temperature to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=o;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}else if("quadratic"===this.elementOrder){({0:[0],2:[2]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant temperature to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=o;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}}))}})):"2D"===this.meshDimension&&Object.keys(this.boundaryConditions).forEach((n=>{if("constantTemp"===this.boundaryConditions[n][0]){const o=this.boundaryConditions[n][1];s(`Boundary ${n}: Applying constant temperature of ${o} K (Dirichlet condition)`),this.boundaryElements[n].forEach((([n,i])=>{if("linear"===this.elementOrder){({0:[0,2],1:[0,1],2:[1,3],3:[2,3]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant temperature to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=o;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}else if("quadratic"===this.elementOrder){({0:[0,3,6],1:[0,1,2],2:[2,5,8],3:[6,7,8]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant temperature to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=o;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}}))}}))}imposeConstantTempBoundaryConditionsFront(e,t){"1D"===this.meshDimension?Object.keys(this.boundaryConditions).forEach((n=>{if("constantTemp"===this.boundaryConditions[n][0]){const o=this.boundaryConditions[n][1];s(`Boundary ${n}: Applying constant temperature of ${o} K (Dirichlet condition)`),this.boundaryElements[n].forEach((([n,i])=>{if("linear"===this.elementOrder){({0:[0],1:[1]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant temperature to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=1,t[r]=o}))}else if("quadratic"===this.elementOrder){({0:[0],2:[2]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant temperature to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=1,t[r]=o}))}}))}})):"2D"===this.meshDimension&&Object.keys(this.boundaryConditions).forEach((n=>{if("constantTemp"===this.boundaryConditions[n][0]){const o=this.boundaryConditions[n][1];s(`Boundary ${n}: Applying constant temperature of ${o} K (Dirichlet condition)`),this.boundaryElements[n].forEach((([n,i])=>{if("linear"===this.elementOrder){({0:[0,2],1:[0,1],2:[1,3],3:[2,3]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant temperature to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=1,t[r]=o}))}else if("quadratic"===this.elementOrder){({0:[0,3,6],1:[0,1,2],2:[2,5,8],3:[6,7,8]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant temperature to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=1,t[r]=o}))}}))}}))}imposeConvectionBoundaryConditions(e,t,n,o,i,r,a){let l=[],d=[];Object.keys(this.boundaryConditions).forEach((e=>{const t=this.boundaryConditions[e];"convection"===t[0]&&(l[e]=t[1],d[e]=t[2])})),"1D"===this.meshDimension?Object.keys(this.boundaryConditions).forEach((n=>{if("convection"===this.boundaryConditions[n][0]){const o=l[n],i=d[n];s(`Boundary ${n}: Applying convection with heat transfer coefficient h=${o} W/(m²·K) and external temperature T∞=${i} K`),this.boundaryElements[n].forEach((([n,r])=>{let a;"linear"===this.elementOrder?a=0===r?0:1:"quadratic"===this.elementOrder&&(a=0===r?0:2);const l=this.nop[n][a]-1;s(`  - Applied convection boundary condition to node ${l+1} (element ${n+1}, local node ${a+1})`),e[l]+=-o*i,t[l][l]+=o}))}})):"2D"===this.meshDimension&&Object.keys(this.boundaryConditions).forEach((c=>{if("convection"===this.boundaryConditions[c][0]){const u=l[c],m=d[c];s(`Boundary ${c}: Applying convection with heat transfer coefficient h=${u} W/(m²·K) and external temperature T∞=${m} K`),this.boundaryElements[c].forEach((([l,d])=>{if("linear"===this.elementOrder){let c,h,f,p,b;0===d?(c=n[0],h=0,f=0,p=3,b=2):1===d?(c=0,h=n[0],f=0,p=2,b=1):2===d?(c=n[0],h=1,f=1,p=4,b=2):3===d&&(c=1,h=n[0],f=2,p=4,b=1);let g=a.getBasisFunctions(c,h),y=g.basisFunction,E=g.basisFunctionDerivKsi,v=g.basisFunctionDerivEta,C=0,M=0,$=0,D=0;const F=this.nop[l].length;for(let e=0;e<F;e++){const t=this.nop[l][e]-1;0===d||2===d?(C+=i[t]*E[e],M+=r[t]*E[e]):1!==d&&3!==d||($+=i[t]*v[e],D+=r[t]*v[e])}let A;A=0===d||2===d?Math.sqrt(C**2+M**2):Math.sqrt($**2+D**2);for(let n=f;n<p;n+=b){let i=this.nop[l][n]-1;s(`  - Applied convection boundary condition to node ${i+1} (element ${l+1}, local node ${n+1})`),e[i]+=-o[0]*A*y[n]*u*m;for(let e=f;e<p;e+=b){let s=this.nop[l][e]-1;t[i][s]+=-o[0]*A*y[n]*y[e]*u}}}else if("quadratic"===this.elementOrder)for(let c=0;c<3;c++){let h,f,p,b,g;0===d?(h=n[c],f=0,p=0,b=7,g=3):1===d?(h=0,f=n[c],p=0,b=3,g=1):2===d?(h=n[c],f=1,p=2,b=9,g=3):3===d&&(h=1,f=n[c],p=6,b=9,g=1);let y=a.getBasisFunctions(h,f),E=y.basisFunction,v=y.basisFunctionDerivKsi,C=y.basisFunctionDerivEta,M=0,$=0,D=0,F=0;const A=this.nop[l].length;for(let e=0;e<A;e++){const t=this.nop[l][e]-1;0===d||2===d?(M+=i[t]*v[e],$+=r[t]*v[e]):1!==d&&3!==d||(D+=i[t]*C[e],F+=r[t]*C[e])}let x;x=0===d||2===d?Math.sqrt(M**2+$**2):Math.sqrt(D**2+F**2);for(let n=p;n<b;n+=g){let i=this.nop[l][n]-1;s(`  - Applied convection boundary condition to node ${i+1} (element ${l+1}, local node ${n+1})`),e[i]+=-o[c]*x*E[n]*u*m;for(let e=p;e<b;e+=g){let s=this.nop[l][e]-1;t[i][s]+=-o[c]*x*E[n]*E[e]*u}}}}))}}))}imposeConvectionBoundaryConditionsFront(e,t,n,o,i,r){let a=[],l=[];Object.keys(this.boundaryConditions).forEach((e=>{const t=this.boundaryConditions[e];"convection"===t[0]&&(a[e]=t[1],l[e]=t[2])}));const d=this.nop[e].length,c=Array(d).fill().map((()=>Array(d).fill(0))),u=Array(d).fill(0);for(const m in this.boundaryElements)if("convection"===this.boundaryConditions[m]?.[0]){const h=a[m],f=l[m];s(`Boundary ${m}: Applying convection with heat transfer coefficient h=${h} W/(m²·K) and external temperature T∞=${f} K`);const p=this.boundaryElements[m].find((([t,n])=>t===e));if(p){const a=p[1];if("1D"===this.meshDimension){let t;"linear"===this.elementOrder?t=0===a?0:1:"quadratic"===this.elementOrder&&(t=0===a?0:2),s(`  - Applied convection boundary condition to node ${t+1} (element ${e+1}, local node ${t+1})`),u[t]+=-h*f,c[t][t]+=h}else if("2D"===this.meshDimension)if("linear"===this.elementOrder){let s,l,m,p,b;0===a?(s=o[0],l=0,m=0,p=3,b=2):1===a?(s=0,l=o[0],m=0,p=2,b=1):2===a?(s=o[0],l=1,m=1,p=4,b=2):3===a&&(s=1,l=o[0],m=2,p=4,b=1);const g=r.getBasisFunctions(s,l),y=g.basisFunction,E=g.basisFunctionDerivKsi,v=g.basisFunctionDerivEta;let C,M=0,$=0,D=0,F=0;for(let o=0;o<d;o++){const s=this.nop[e][o]-1;0===a||2===a?(M+=t[s]*E[o],$+=n[s]*E[o]):1!==a&&3!==a||(D+=t[s]*v[o],F+=n[s]*v[o])}C=0===a||2===a?Math.sqrt(M**2+$**2):Math.sqrt(D**2+F**2);for(let e=m;e<p;e+=b){u[e]+=-i[0]*C*y[e]*h*f;for(let t=m;t<p;t+=b)c[e][t]+=-i[0]*C*y[e]*y[t]*h}}else if("quadratic"===this.elementOrder)for(let s=0;s<3;s++){let l,d,m,p,b;0===a?(l=o[s],d=0,m=0,p=7,b=3):1===a?(l=0,d=o[s],m=0,p=3,b=1):2===a?(l=o[s],d=1,m=2,p=9,b=3):3===a&&(l=1,d=o[s],m=6,p=9,b=1);let g=r.getBasisFunctions(l,d),y=g.basisFunction,E=g.basisFunctionDerivKsi,v=g.basisFunctionDerivEta,C=0,M=0,$=0,D=0;const F=this.nop[e].length;for(let o=0;o<F;o++){const s=this.nop[e][o]-1;0===a||2===a?(C+=t[s]*E[o],M+=n[s]*E[o]):1!==a&&3!==a||($+=t[s]*v[o],D+=n[s]*v[o])}let A;A=0===a||2===a?Math.sqrt(C**2+M**2):Math.sqrt($**2+D**2);for(let e=m;e<p;e+=b){u[e]+=-i[s]*A*y[e]*h*f;for(let t=m;t<p;t+=b)c[e][t]+=-i[s]*A*y[e]*y[t]*h}}}}return{localJacobianMatrix:c,localResidualVector:u}}}function I(e,t){i("Starting solid heat transfer matrix assembly...");const{nodesXCoordinates:n,nodesYCoordinates:o,nop:s,boundaryElements:r,totalElements:a,meshDimension:l,elementOrder:d}=e,c=T(e),{residualVector:u,jacobianMatrix:m,localToGlobalMap:h,basisFunctions:f,gaussPoints:p,gaussWeights:b,numNodes:g}=c;for(let e=0;e<a;e++){for(let t=0;t<g;t++)h[t]=s[e][t]-1;for(let e=0;e<p.length;e++)if("1D"===l){const t=f.getBasisFunctions(p[e]),o=P({basisFunction:t.basisFunction,basisFunctionDerivKsi:t.basisFunctionDerivKsi,nodesXCoordinates:n,localToGlobalMap:h,numNodes:g}),{detJacobian:s,basisFunctionDerivX:i}=o;for(let t=0;t<g;t++){let n=h[t];for(let o=0;o<g;o++){let r=h[o];m[n][r]+=-b[e]*s*(i[t]*i[o])}}}else if("2D"===l)for(let t=0;t<p.length;t++){const s=f.getBasisFunctions(p[e],p[t]),i=R({basisFunction:s.basisFunction,basisFunctionDerivKsi:s.basisFunctionDerivKsi,basisFunctionDerivEta:s.basisFunctionDerivEta,nodesXCoordinates:n,nodesYCoordinates:o,localToGlobalMap:h,numNodes:g}),{detJacobian:r,basisFunctionDerivX:a,basisFunctionDerivY:l}=i;for(let n=0;n<g;n++){let o=h[n];for(let s=0;s<g;s++){let i=h[s];m[o][i]+=-b[e]*b[t]*r*(a[n]*a[s]+l[n]*l[s])}}}}const y=new Y(t,r,s,l,d);return y.imposeConvectionBoundaryConditions(u,m,p,b,n,o,f),y.imposeConstantTempBoundaryConditions(u,m),i("Solid heat transfer matrix assembly completed"),{jacobianMatrix:m,residualVector:u}}function B({elementIndex:e,nop:t,meshData:n,basisFunctions:o,FEAData:s}){const{gaussPoints:i,gaussWeights:r,numNodes:a}=s,{nodesXCoordinates:l,nodesYCoordinates:d,meshDimension:c}=n,u=Array(a).fill().map((()=>Array(a).fill(0))),m=Array(a).fill(0),h=Array(a),f=Array(a);for(let n=0;n<a;n++)h[n]=Math.abs(t[e][n]),f[n]=Math.abs(t[e][n])-1;if("1D"===c)for(let e=0;e<i.length;e++){const{basisFunction:t,basisFunctionDerivKsi:n}=o.getBasisFunctions(i[e]),{detJacobian:s,basisFunctionDerivX:d}=P({basisFunction:t,basisFunctionDerivKsi:n,nodesXCoordinates:l,localToGlobalMap:f,numNodes:a});for(let t=0;t<a;t++)for(let n=0;n<a;n++)u[t][n]-=r[e]*s*(d[t]*d[n])}else if("2D"===c)for(let e=0;e<i.length;e++)for(let t=0;t<i.length;t++){const{basisFunction:n,basisFunctionDerivKsi:s,basisFunctionDerivEta:c}=o.getBasisFunctions(i[e],i[t]),m=h.map((e=>e-1)),{detJacobian:f,basisFunctionDerivX:p,basisFunctionDerivY:b}=R({basisFunction:n,basisFunctionDerivKsi:s,basisFunctionDerivEta:c,nodesXCoordinates:l,nodesYCoordinates:d,localToGlobalMap:m,numNodes:a});for(let n=0;n<a;n++)for(let o=0;o<a;o++)u[n][o]-=r[e]*r[t]*f*(p[n]*p[o]+b[n]*b[o])}return{localJacobianMatrix:u,localResidualVector:m,ngl:h}}class W{constructor(e,t,n,o,s){this.boundaryConditions=e,this.boundaryElements=t,this.nop=n,this.meshDimension=o,this.elementOrder=s}imposeDirichletBoundaryConditions(e,t){"1D"===this.meshDimension?Object.keys(this.boundaryConditions).forEach((n=>{if("constantValue"===this.boundaryConditions[n][0]){const o=this.boundaryConditions[n][1];s(`Boundary ${n}: Applying constant value of ${o} (Dirichlet condition)`),this.boundaryElements[n].forEach((([n,i])=>{if("linear"===this.elementOrder){({0:[0],1:[1]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant value to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=o;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}else if("quadratic"===this.elementOrder){({0:[0],2:[2]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant value to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=o;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}}))}})):"2D"===this.meshDimension&&Object.keys(this.boundaryConditions).forEach((n=>{if("constantValue"===this.boundaryConditions[n][0]){const o=this.boundaryConditions[n][1];s(`Boundary ${n}: Applying constant value of ${o} (Dirichlet condition)`),this.boundaryElements[n].forEach((([n,i])=>{if("linear"===this.elementOrder){({0:[0,2],1:[0,1],2:[1,3],3:[2,3]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant value to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=o;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}else if("quadratic"===this.elementOrder){({0:[0,3,6],1:[0,1,2],2:[2,5,8],3:[6,7,8]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant value to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=o;for(let n=0;n<e.length;n++)t[r][n]=0;t[r][r]=1}))}}))}}))}imposeConstantValueBoundaryConditionsFront(e,t){"1D"===this.meshDimension?Object.keys(this.boundaryConditions).forEach((n=>{if("constantValue"===this.boundaryConditions[n][0]){const o=this.boundaryConditions[n][1];s(`Boundary ${n}: Applying constant value of ${o} (Dirichlet condition)`),this.boundaryElements[n].forEach((([n,i])=>{if("linear"===this.elementOrder){({0:[0],1:[1]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant value to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=1,t[r]=o}))}else if("quadratic"===this.elementOrder){({0:[0],2:[2]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant value to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=1,t[r]=o}))}}))}})):"2D"===this.meshDimension&&Object.keys(this.boundaryConditions).forEach((n=>{if("constantValue"===this.boundaryConditions[n][0]){const o=this.boundaryConditions[n][1];s(`Boundary ${n}: Applying constant value of ${o} (Dirichlet condition)`),this.boundaryElements[n].forEach((([n,i])=>{if("linear"===this.elementOrder){({0:[0,2],1:[0,1],2:[1,3],3:[2,3]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant value to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=1,t[r]=o}))}else if("quadratic"===this.elementOrder){({0:[0,3,6],1:[0,1,2],2:[2,5,8],3:[6,7,8]})[i].forEach((i=>{const r=this.nop[n][i]-1;s(`  - Applied constant value to node ${r+1} (element ${n+1}, local node ${i+1})`),e[r]=1,t[r]=o}))}}))}}))}}function j(e,t,n,o){i("Starting front propagation matrix assembly...");let r=1-o+.01;s(`eikonalViscousTerm: ${r}`),s(`eikonalActivationFlag: ${o}`);const{nodesXCoordinates:a,nodesYCoordinates:l,nop:d,boundaryElements:c,totalElements:u,meshDimension:m,elementOrder:h}=e,f=T(e),{residualVector:p,jacobianMatrix:b,localToGlobalMap:g,basisFunctions:y,gaussPoints:E,gaussWeights:v,numNodes:C}=f;for(let e=0;e<u;e++){for(let t=0;t<C;t++)g[t]=d[e][t]-1;for(let e=0;e<E.length;e++)if("1D"===m){errorLog("1D front propagation is not yet supported");let t=y.getBasisFunctions(E[e]);const o=P({basisFunction:t.basisFunction,basisFunctionDerivKsi:t.basisFunctionDerivKsi,nodesXCoordinates:a,localToGlobalMap:g,numNodes:C}),{detJacobian:s,basisFunctionDerivX:i}=o;t.basisFunction;let r=0;for(let e=0;e<C;e++)r+=n[g[e]]*i[e];for(let e=0;e<C;e++){g[e];for(let e=0;e<C;e++)g[e]}}else if("2D"===m)for(let t=0;t<E.length;t++){let s=y.getBasisFunctions(E[e],E[t]);const i=R({basisFunction:s.basisFunction,basisFunctionDerivKsi:s.basisFunctionDerivKsi,basisFunctionDerivEta:s.basisFunctionDerivEta,nodesXCoordinates:a,nodesYCoordinates:l,localToGlobalMap:g,numNodes:C}),{detJacobian:d,basisFunctionDerivX:c,basisFunctionDerivY:u}=i,m=s.basisFunction;let h=0,f=0;for(let e=0;e<C;e++)h+=n[g[e]]*c[e],f+=n[g[e]]*u[e];for(let n=0;n<C;n++){let s=g[n];p[s]+=r*v[e]*v[t]*d*c[n]*h+r*v[e]*v[t]*d*u[n]*f,0!==o&&(p[s]+=o*(v[e]*v[t]*d*m[n]*Math.sqrt(h**2+f**2)-v[e]*v[t]*d*m[n]));for(let i=0;i<C;i++){let a=g[i];b[s][a]+=-r*v[e]*v[t]*d*(c[n]*c[i]+u[n]*u[i]),0!==o&&(b[s][a]+=o*(-d*h*m[n]*v[e]*v[t]/Math.sqrt(h**2+f**2+1e-8))*c[i]-o*(d*f*m[n]*v[e]*v[t]/Math.sqrt(h**2+f**2+1e-8))*u[i])}}}}return new W(t,c,d,m,h).imposeDirichletBoundaryConditions(p,b),i("Front propagation matrix assembly completed"),{jacobianMatrix:b,residualVector:p}}function q({elementIndex:e,nop:t,meshData:n,basisFunctions:o,FEAData:s,solutionVector:i,eikonalActivationFlag:r}){const{gaussPoints:a,gaussWeights:l,numNodes:d}=s,{nodesXCoordinates:c,nodesYCoordinates:u,meshDimension:m}=n;let h=1-r+.01;const f=Array(d).fill().map((()=>Array(d).fill(0))),p=Array(d).fill(0),b=Array(d),g=Array(d);for(let n=0;n<d;n++)b[n]=Math.abs(t[e][n]),g[n]=Math.abs(t[e][n])-1;for(let e=0;e<a.length;e++)if("1D"===m){errorLog("1D front propagation is not yet supported");let t=o.getBasisFunctions(a[e]);const n=P({basisFunction:t.basisFunction,basisFunctionDerivKsi:t.basisFunctionDerivKsi,nodesXCoordinates:c,localToGlobalMap:g,numNodes:d}),{detJacobian:s,basisFunctionDerivX:r}=n;t.basisFunction;let l=0;for(let e=0;e<d;e++)l+=i[g[e]]*r[e];for(let e=0;e<d;e++){g[e];for(let e=0;e<d;e++)g[e]}}else if("2D"===m)for(let t=0;t<a.length;t++){const{basisFunction:n,basisFunctionDerivKsi:s,basisFunctionDerivEta:m}=o.getBasisFunctions(a[e],a[t]),{detJacobian:b,basisFunctionDerivX:y,basisFunctionDerivY:E}=R({basisFunction:n,basisFunctionDerivKsi:s,basisFunctionDerivEta:m,nodesXCoordinates:c,nodesYCoordinates:u,localToGlobalMap:g,numNodes:d});let v=0,C=0;for(let e=0;e<d;e++)v+=i[g[e]]*y[e],C+=i[g[e]]*E[e];for(let o=0;o<d;o++){g[o],p[o]+=h*l[e]*l[t]*b*y[o]*v+h*l[e]*l[t]*b*E[o]*C,0!==r&&(p[o]+=r*(l[e]*l[t]*b*n[o]*Math.sqrt(v**2+C**2)-l[e]*l[t]*b*n[o]));for(let s=0;s<d;s++)f[o][s]-=h*l[e]*l[t]*b*(y[o]*y[s]+E[o]*E[s]),0!==r&&(f[o][s]+=r*(-b*v*n[o]*l[e]*l[t]/Math.sqrt(v**2+C**2+1e-8))*y[s]-r*(b*C*n[o]*l[e]*l[t]/Math.sqrt(v**2+C**2+1e-8))*E[s])}}return{localJacobianMatrix:f,localResidualVector:p,ngl:b}}const G={},J={},K={currentElementIndex:0},H={};let L;function U(e,t,n,o={}){const a=T(t),l=t.nodesXCoordinates.length,d=t.totalElements;!function(e,t){G.nodalNumbering=Array(t).fill().map((()=>Array(e).fill(0))),G.nodeConstraintCode=Array(e).fill(0),G.boundaryValues=Array(e).fill(0),G.globalResidualVector=Array(e).fill(0),G.solutionVector=Array(e).fill(0),G.topologyData=Array(t).fill(0),G.lateralData=Array(t).fill(0),J.writeFlag=0,J.totalNodes=e,J.transformationFlag=0,J.nodesPerElement=Array(t).fill(0),J.determinant=1;const n=Math.max(e,2e3);J.globalSolutionVector=Array(n).fill(0),J.frontDataIndex=0,K.localJacobianMatrix=Array(e).fill().map((()=>Array(e).fill(0))),K.currentElementIndex=0;const o=function(e,t){const n=Math.max(Math.ceil(Math.sqrt(t))*e,2*e);return n*t}(e,t);H.frontValues=Array(o).fill(0),H.columnHeaders=Array(n).fill(0),H.pivotRow=Array(n).fill(0),H.pivotData=Array(o).fill(0)}(a.numNodes,d),i("Solving system using frontal..."),console.time("systemSolving"),L=new N({meshDimension:t.meshDimension,elementOrder:t.elementOrder});for(let e=0;e<t.totalElements;e++)for(let n=0;n<a.numNodes;n++)G.nodalNumbering[e][n]=t.nop[e][n];for(let e=0;e<t.nodesXCoordinates.length;e++)G.nodeConstraintCode[e]=0,G.boundaryValues[e]=0;let c;e===B?(c=new Y(n,t.boundaryElements,t.nop,t.meshDimension,t.elementOrder),c.imposeConstantTempBoundaryConditionsFront(G.nodeConstraintCode,G.boundaryValues)):e===q&&(c=new W(n,t.boundaryElements,t.nop,t.meshDimension,t.elementOrder),c.imposeConstantValueBoundaryConditionsFront(G.nodeConstraintCode,G.boundaryValues));for(let e=0;e<t.nodesXCoordinates.length;e++)G.globalResidualVector[e]=0;J.totalNodes=t.nodesXCoordinates.length,J.writeFlag=0,J.transformationFlag=1,J.determinant=1;for(let e=0;e<t.totalElements;e++)J.nodesPerElement[e]=a.numNodes;J.currentSolutionVector=o.solutionVector,J.eikonalActivationFlag=o.eikonalActivationFlag,function(e,t,n,o){const i=e.totalElements,a=e.nodesXCoordinates.length,l=Math.max(a,J.globalSolutionVector.length);let d,c=Array(t.numNodes).fill(0),u=Array(t.numNodes).fill(0),m=Array(l).fill(0),h=Array(l).fill(0),f=Array(l).fill(0),p=Array(l).fill(0),b=Array(l).fill(0),g=Array(l).fill().map((()=>Array(l).fill(0))),y=Array(a).fill(0),E=Array(a).fill(0),v=Array(a).fill(0),C=1;J.writeFlag++;let M=1,$=1;K.currentElementIndex=0;for(let e=0;e<J.totalNodes;e++)y[e]=0,E[e]=0;if(0!==J.transformationFlag){for(let e=0;e<J.totalNodes;e++)v[e]=0;for(let e=0;e<i;e++){let t=i-e-1;for(let e=0;e<J.nodesPerElement[t];e++){let n=G.nodalNumbering[t][e];0===v[n-1]&&(v[n-1]=1,G.nodalNumbering[t][e]=-G.nodalNumbering[t][e])}}}J.transformationFlag=0;let D=0,F=0;for(let e=0;e<l;e++)for(let t=0;t<l;t++)g[t][e]=0;for(;;){let a=!1,v=0,A=0;if(K.currentElementIndex<i&&(K.currentElementIndex++,a=z(e,t,n,o)),a){const e=K.currentElementIndex;v=J.nodesPerElement[e-1],A=J.nodesPerElement[e-1];for(let t=0;t<A;t++){let n,o,s=G.nodalNumbering[e-1][t];if(0===D)D++,c[t]=D,H.columnHeaders[D-1]=s;else{for(n=0;n<D&&Math.abs(s)!==Math.abs(H.columnHeaders[n]);n++);n===D?(D++,c[t]=D,H.columnHeaders[D-1]=s):(c[t]=n+1,H.columnHeaders[n]=s)}if(0===F)F++,u[t]=F,m[F-1]=s;else{for(o=0;o<F&&Math.abs(s)!==Math.abs(m[o]);o++);o===F?(F++,u[t]=F,m[F-1]=s):(u[t]=o+1,m[o]=s)}}if(F>l||D>l)return void r("Error: systemSize not large enough");for(let e=0;e<A;e++){let t=c[e];for(let n=0;n<v;n++){g[u[n]-1][t-1]+=K.localJacobianMatrix[n][e]}}}let x=0;for(let e=0;e<D;e++)H.columnHeaders[e]<0&&(f[x]=e+1,x++);let w=0,N=0;for(let e=0;e<F;e++){let t=m[e];if(t<0){h[N]=e+1,N++;let n=Math.abs(t);1===G.nodeConstraintCode[n-1]&&(p[w]=e+1,w++,G.nodeConstraintCode[n-1]=2,G.globalResidualVector[n-1]=G.boundaryValues[n-1])}}if(w>0)for(let e=0;e<w;e++){let t=p[e]-1,n=Math.abs(m[t]);for(let e=0;e<D;e++){g[t][e]=0,Math.abs(H.columnHeaders[e])===n&&(g[t][e]=1)}}if(x>$||K.currentElementIndex<i){if(0===x)return void r("Error: no more rows fully summed");let e=h[0],t=f[0],n=g[e-1][t-1];if(Math.abs(n)<1e-4){n=0;for(let o=0;o<x;o++){let s=f[o];for(let o=0;o<N;o++){let i=h[o],r=g[i-1][s-1];Math.abs(r)>Math.abs(n)&&(n=r,t=s,e=i)}}}let o=Math.abs(m[e-1]);d=Math.abs(H.columnHeaders[t-1]);let a=o+d+y[o-1]+E[d-1];J.determinant=J.determinant*n*(-1)**a/Math.abs(n);for(let e=0;e<J.totalNodes;e++)e>=o&&y[e]--,e>=d&&E[e]--;if(Math.abs(n)<1e-10&&r(`Matrix singular or ill-conditioned, currentElementIndex=${K.currentElementIndex}, pivotGlobalRowIndex=${o}, pivotColumnGlobalIndex=${d}, pivotValue=${n}`),0===n)return;for(let t=0;t<D;t++)H.pivotRow[t]=g[e-1][t]/n;let l=G.globalResidualVector[o-1]/n;if(G.globalResidualVector[o-1]=l,b[e-1]=n,e>1)for(let n=0;n<e-1;n++){let e=Math.abs(m[n]),o=g[n][t-1];if(b[n]=o,t>1&&0!==o)for(let e=0;e<t-1;e++)g[n][e]-=o*H.pivotRow[e];if(t<D)for(let e=t;e<D;e++)g[n][e-1]=g[n][e]-o*H.pivotRow[e];G.globalResidualVector[e-1]-=o*l}if(e<F)for(let n=e;n<F;n++){let e=Math.abs(m[n]),o=g[n][t-1];if(b[n]=o,t>1)for(let e=0;e<t-1;e++)g[n-1][e]=g[n][e]-o*H.pivotRow[e];if(t<D)for(let e=t;e<D;e++)g[n-1][e-1]=g[n][e]-o*H.pivotRow[e];G.globalResidualVector[e-1]-=o*l}for(let e=0;e<F;e++)H.pivotData[M+e-1]=b[e];M+=F;for(let e=0;e<F;e++)H.pivotData[M+e-1]=m[e];M+=F,H.pivotData[M-1]=e,M++;for(let e=0;e<D;e++)H.frontValues[C-1+e]=H.pivotRow[e];C+=D;for(let e=0;e<D;e++)H.frontValues[C-1+e]=H.columnHeaders[e];C+=D,H.frontValues[C-1]=o,H.frontValues[C]=D,H.frontValues[C+1]=t,H.frontValues[C+2]=n,C+=4;for(let e=0;e<F;e++)g[e][D-1]=0;for(let e=0;e<D;e++)g[F-1][e]=0;if(D--,t<D+1)for(let e=t-1;e<D;e++)H.columnHeaders[e]=H.columnHeaders[e+1];if(F--,e<F+1)for(let t=e-1;t<F;t++)m[t]=m[t+1];if(F>1||K.currentElementIndex<i)continue;if(d=Math.abs(H.columnHeaders[0]),e=1,n=g[0][0],o=Math.abs(m[0]),t=1,a=o+d+y[o-1]+E[d-1],J.determinant=J.determinant*n*(-1)**a/Math.abs(n),H.pivotRow[0]=1,Math.abs(n)<1e-10&&r(`Matrix singular or ill-conditioned, currentElementIndex=${K.currentElementIndex}, pivotGlobalRowIndex=${o}, pivotColumnGlobalIndex=${d}, pivotValue=${n}`),0===n)return;G.globalResidualVector[o-1]=G.globalResidualVector[o-1]/n,H.frontValues[C-1]=H.pivotRow[0],C++,H.frontValues[C-1]=H.columnHeaders[0],C++,H.frontValues[C-1]=o,H.frontValues[C]=D,H.frontValues[C+1]=t,H.frontValues[C+2]=n,C+=4,H.pivotData[M-1]=b[0],M++,H.pivotData[M-1]=m[0],M++,H.pivotData[M-1]=e,M++,J.frontDataIndex=C,1===J.writeFlag&&s(`total ecs transfer in matrix reduction=${C}`),_(C);break}}}(t,a,c,e);for(let e=0;e<t.nodesXCoordinates.length;e++)G.solutionVector[e]=J.globalSolutionVector[e];const{nodesXCoordinates:u,nodesYCoordinates:m}=t;for(let e=0;e<t.nodesXCoordinates.length;e++)"1D"===t.meshDimension?s(`${u[e].toExponential(5)}  ${G.solutionVector[e].toExponential(5)}`):s(`${u[e].toExponential(5)}  ${m[e].toExponential(5)}  ${G.solutionVector[e].toExponential(5)}`);console.timeEnd("systemSolving"),i("System solved successfully");const{nodesXCoordinates:h,nodesYCoordinates:f}=t;return{solutionVector:G.solutionVector.slice(0,l),nodesCoordinates:{nodesXCoordinates:h,nodesYCoordinates:f}}}function z(e,t,n,o){const s=K.currentElementIndex-1;if(s<0||s>=e.totalElements)return r(`Skipping out-of-range elementIndex=${s} (totalElements=${e.totalElements})`),!1;const{localJacobianMatrix:i,localResidualVector:a,ngl:l}=o({elementIndex:s,nop:G.nodalNumbering,meshData:e,basisFunctions:L,FEAData:t,solutionVector:J.currentSolutionVector,eikonalActivationFlag:J.eikonalActivationFlag});let d=Array(t.numNodes).fill().map((()=>Array(t.numNodes).fill(0))),c=Array(t.numNodes).fill(0);if(o===B){let o=!1;for(const t in e.boundaryElements)if("convection"===n.boundaryConditions[t]?.[0]&&e.boundaryElements[t].some((([e,t])=>e===s))){o=!0;break}if(o){const{gaussPoints:o,gaussWeights:i}=t,r=n.imposeConvectionBoundaryConditionsFront(s,e.nodesXCoordinates,e.nodesYCoordinates,o,i,L);d=r.localJacobianMatrix,c=r.localResidualVector}}for(let e=0;e<t.numNodes;e++)for(let n=0;n<t.numNodes;n++)K.localJacobianMatrix[e][n]=i[e][n]+d[e][n];for(let e=0;e<t.numNodes;e++){const t=l[e]-1;G.globalResidualVector[t]+=a[e]+c[e]}return!0}function _(e){for(let e=0;e<J.totalNodes;e++)J.globalSolutionVector[e]=G.boundaryValues[e];for(let t=1;t<=J.totalNodes;t++){e-=4;let n=H.frontValues[e-1],o=H.frontValues[e],s=H.frontValues[e+1];if(H.frontValues[e+2],1===t)e--,H.columnHeaders[0]=H.frontValues[e-1],e--,H.pivotRow[0]=H.frontValues[e-1];else{e-=o;for(let t=0;t<o;t++)H.columnHeaders[t]=H.frontValues[e-1+t];e-=o;for(let t=0;t<o;t++)H.pivotRow[t]=H.frontValues[e-1+t]}let i=Math.abs(H.columnHeaders[s-1]);if(G.nodeConstraintCode[i-1]>0)continue;let r=0;H.pivotRow[s-1]=0;for(let e=0;e<o;e++)r-=H.pivotRow[e]*J.globalSolutionVector[Math.abs(H.columnHeaders[e])-1];J.globalSolutionVector[i-1]=r+G.globalResidualVector[n-1],G.nodeConstraintCode[i-1]=1}1===J.writeFlag&&s(`value of frontDataCounter after backsubstitution=${e}`)}function Q(t,n,o=100,s=1e-4){let a=0,l=!1,d=0,c=[],u=[],m=[],h=[],f=n.meshData.nodesXCoordinates.length;for(let e=0;e<f;e++)c[e]=0,u[e]=0;for(n.initialSolution&&n.initialSolution.length===f&&(u=[...n.initialSolution]);d<o&&!l;){for(let e=0;e<u.length;e++)u[e]=Number(u[e])+Number(c[e]);if("frontal"===n.solverMethod){c=U(q,n.meshData,n.boundaryConditions,{solutionVector:u,eikonalActivationFlag:n.eikonalActivationFlag}).solutionVector}else{({jacobianMatrix:m,residualVector:h}=t(n.meshData,n.boundaryConditions,u,n.eikonalActivationFlag));c=x(n.solverMethod,m,h).solutionVector}if(a=e(c),i(`Newton-Raphson iteration ${d+1}: Error norm = ${a.toExponential(4)}`),a<=s)l=!0;else if(a>100){r(`Solution not converged. Error norm: ${a}`);break}d++}return{solutionVector:u,converged:l,iterations:d,jacobianMatrix:m,residualVector:h}}class Z{constructor(){var e;this.solverConfig=null,this.meshConfig={},this.boundaryConditions={},this.solverMethod="lusolve",this.coefficientFunctions=null,e="FEAScript is provided “as is” without any warranty. The authors are not responsible for any damages or losses that may result from using the software. See the license for more details: https://github.com/FEAScript/FEAScript-core/blob/main/LICENSE",console.log("%c[WARN] "+e,"color: #FF9800; font-weight: bold;"),i("FEAScriptModel instance created")}setSolverConfig(e,t={}){this.solverConfig=e,t&&t.coefficientFunctions&&(this.coefficientFunctions=t.coefficientFunctions,s("Coefficient functions set")),s(`Solver config set to: ${e}`)}setMeshConfig(e){this.meshConfig=e,s(`Mesh config set with dimensions: ${e.meshDimension}`)}addBoundaryCondition(e,t){this.boundaryConditions[e]=t,s(`Boundary condition added for boundary: ${e}, type: ${t[0]}`)}setSolverMethod(e){this.solverMethod=e,s(`Solver method set to: ${e}`)}async solveWithWebgpu(e){this.solverConfig&&this.meshConfig&&this.boundaryConditions||r("Solver config, mesh config, and boundary conditions must be set before solving.");let t=[],n=[],o=[],s={};i("Preparing mesh...");const a=k(this.meshConfig);i("Mesh preparation completed"),s={nodesXCoordinates:a.nodesXCoordinates,nodesYCoordinates:a.nodesYCoordinates},i("Beginning matrix assembly..."),console.time("assemblyMatrices"),"solidHeatTransferScript"===this.solverConfig&&(i(`Using solver: ${this.solverConfig}`),({jacobianMatrix:t,residualVector:n}=I(a,this.boundaryConditions))),console.timeEnd("assemblyMatrices"),i("Matrix assembly completed"),i("Solving system using WebGPU Jacobi..."),console.time("systemSolving");const l=Array.isArray(t)?t:t.toArray(),d=Array.isArray(n)?n:n.toArray();console.log("Matrix diagonal sample:",l.slice(0,5).map(((e,t)=>e[t]))),console.log("RHS sample:",d.slice(0,5));const c=new Array(d.length).fill(0);return o=await e.webgpuJacobiSolver(l,d,c,1e4,.001),console.timeEnd("systemSolving"),i("System solved successfully with WebGPU Jacobi"),{solutionVector:o,nodesCoordinates:s}}solve(){this.solverConfig&&this.meshConfig&&this.boundaryConditions||r("Solver config, mesh config, and boundary conditions must be set before solving.");let e=[],t=[],n=[],o=[];i("Preparing mesh...");const s=k(this.meshConfig);i("Mesh preparation completed");const a={nodesXCoordinates:s.nodesXCoordinates,nodesYCoordinates:s.nodesYCoordinates};if(i("Beginning solving process..."),console.time("totalSolvingTime"),"heatConductionScript"===this.solverConfig)if(i(`Using solver: ${this.solverConfig}`),"frontal"===this.solverMethod){n=U(B,s,this.boundaryConditions).solutionVector}else{({jacobianMatrix:e,residualVector:t}=I(s,this.boundaryConditions));n=x(this.solverMethod,e,t).solutionVector}else if("frontPropagationScript"===this.solverConfig){i(`Using solver: ${this.solverConfig}`);let r=0;const a=5,l={meshData:s,boundaryConditions:this.boundaryConditions,eikonalActivationFlag:r,solverMethod:this.solverMethod,initialSolution:o};for(;r<=1;){l.eikonalActivationFlag=r,n.length>0&&(l.initialSolution=[...n]);const o=Q(j,l,100,1e-4);e=o.jacobianMatrix,t=o.residualVector,n=o.solutionVector,r+=1/a}}else if("generalFormPDEScript"===this.solverConfig)if(i(`Using solver: ${this.solverConfig}`),"frontal"===this.solverMethod)r("Frontal solver is not yet supported for generalFormPDEScript. Please use 'lusolve' or 'jacobi'.");else{({jacobianMatrix:e,residualVector:t}=function(e,t,n){i("Starting general form PDE matrix assembly...");const{nodesXCoordinates:o,nodesYCoordinates:s,nop:a,boundaryElements:l,totalElements:d,meshDimension:c,elementOrder:u}=e,{A:m,B:h,C:f,D:p}=n,b=T(e),{residualVector:g,jacobianMatrix:y,localToGlobalMap:E,basisFunctions:v,gaussPoints:C,gaussWeights:M,numNodes:$}=b;if("1D"===c)for(let e=0;e<d;e++){for(let t=0;t<$;t++)E[t]=Math.abs(a[e][t])-1;for(let e=0;e<C.length;e++){const{basisFunction:t,basisFunctionDerivKsi:n}=v.getBasisFunctions(C[e]),{detJacobian:s,basisFunctionDerivX:i}=P({basisFunction:t,basisFunctionDerivKsi:n,nodesXCoordinates:o,localToGlobalMap:E,numNodes:$});let r=0;for(let e=0;e<$;e++)r+=o[E[e]]*t[e];const a=m(r),l=h(r),d=f(r),c=p(r);for(let n=0;n<$;n++){const o=E[n];g[o]-=M[e]*s*c*t[n];for(let r=0;r<$;r++){const c=E[r];y[o][c]+=M[e]*s*a*i[n]*i[r],y[o][c]-=M[e]*s*l*i[r]*t[n],y[o][c]-=M[e]*s*d*t[n]*t[r]}}}}else"2D"===c&&r("2D general form PDE is not yet supported in assembleGeneralFormPDEMat.");return new W(t,l,a,c,u).imposeDirichletBoundaryConditions(g,y),i("General form PDE matrix assembly completed"),{jacobianMatrix:y,residualVector:g}}(s,this.boundaryConditions,this.coefficientFunctions));n=x(this.solverMethod,e,t).solutionVector}return console.timeEnd("totalSolvingTime"),i("Solving process completed"),{solutionVector:n,nodesCoordinates:a}}async solveAsync(e,t={}){this.solverConfig&&this.meshConfig&&this.boundaryConditions||r("Solver config, mesh config, and boundary conditions must be set before solving.");let n=[],o=[],s=[];i("Preparing mesh...");const a=k(this.meshConfig);i("Mesh preparation completed");const l={nodesXCoordinates:a.nodesXCoordinates,nodesYCoordinates:a.nodesYCoordinates};if(i("Beginning solving process..."),console.time("totalSolvingTime"),"heatConductionScript"===this.solverConfig)if(({jacobianMatrix:n,residualVector:o}=I(a,this.boundaryConditions)),"jacobi-gpu"===this.solverMethod){const{solutionVector:i}=await w("jacobi-gpu",n,o,{computeEngine:e,maxIterations:t.maxIterations,tolerance:t.tolerance});s=i}else{const{solutionVector:e}=x(this.solverMethod,n,o);s=e}return console.timeEnd("totalSolvingTime"),i("Solving process completed"),{solutionVector:s,nodesCoordinates:l}}}const ee=async e=>{let t={nodesXCoordinates:[],nodesYCoordinates:[],nodalNumbering:{quadElements:[],triangleElements:[]},boundaryElements:[],boundaryConditions:[],boundaryNodePairs:{},gmshV:0,ascii:!1,fltBytes:"8",totalNodesX:0,totalNodesY:0,physicalPropMap:[],elementTypes:{}},n=(await e.text()).split("\n").map((e=>e.trim())).filter((e=>""!==e&&" "!==e)),o="",i=0,r=0,a=0,l=0,d={numNodes:0},c=0,u=[],m=0,h=0,f=0,p={dim:0,tag:0,elementType:0,numElements:0},b=0,g={};for(;i<n.length;){const e=n[i];if("$MeshFormat"===e){o="meshFormat",i++;continue}if("$EndMeshFormat"===e){o="",i++;continue}if("$PhysicalNames"===e){o="physicalNames",i++;continue}if("$EndPhysicalNames"===e){o="",i++;continue}if("$Entities"===e){o="entities",i++;continue}if("$EndEntities"===e){o="",i++;continue}if("$Nodes"===e){o="nodes",i++;continue}if("$EndNodes"===e){o="",i++;continue}if("$Elements"===e){o="elements",i++;continue}if("$EndElements"===e){o="",i++;continue}const s=e.split(/\s+/).filter((e=>""!==e));if("meshFormat"===o)t.gmshV=parseFloat(s[0]),t.ascii="0"===s[1],t.fltBytes=s[2];else if("physicalNames"===o){if(s.length>=3){if(!/^\d+$/.test(s[0])){i++;continue}const e=parseInt(s[0],10),n=parseInt(s[1],10);let o=s.slice(2).join(" ");o=o.replace(/^"|"$/g,""),t.physicalPropMap.push({tag:n,dimension:e,name:o})}}else if("nodes"===o){if(0===r){r=parseInt(s[0],10),a=parseInt(s[1],10),t.nodesXCoordinates=new Array(a).fill(0),t.nodesYCoordinates=new Array(a).fill(0),i++;continue}if(l<r&&0===d.numNodes){d={dim:parseInt(s[0],10),tag:parseInt(s[1],10),parametric:parseInt(s[2],10),numNodes:parseInt(s[3],10)},u=[],c=0,m=0,i++;continue}if(c<d.numNodes){for(let e=0;e<s.length&&c<d.numNodes;e++)u.push(parseInt(s[e],10)),c++;if(c<d.numNodes){i++;continue}i++;continue}if(m<d.numNodes){const e=u[m]-1,n=parseFloat(s[0]),o=parseFloat(s[1]);t.nodesXCoordinates[e]=n,t.nodesYCoordinates[e]=o,t.totalNodesX++,t.totalNodesY++,m++,m===d.numNodes&&(l++,d={numNodes:0})}}else if("elements"===o){if(0===h){h=parseInt(s[0],10),parseInt(s[1],10),i++;continue}if(f<h&&0===p.numElements){p={dim:parseInt(s[0],10),tag:parseInt(s[1],10),elementType:parseInt(s[2],10),numElements:parseInt(s[3],10)},t.elementTypes[p.elementType]=(t.elementTypes[p.elementType]||0)+p.numElements,b=0,i++;continue}if(b<p.numElements){parseInt(s[0],10);const e=s.slice(1).map((e=>parseInt(e,10)));if(1===p.elementType||8===p.elementType){const n=p.tag;g[n]||(g[n]=[]),g[n].push(e),t.boundaryNodePairs[n]||(t.boundaryNodePairs[n]=[]),t.boundaryNodePairs[n].push(e)}else 2===p.elementType?t.nodalNumbering.triangleElements.push(e):(3===p.elementType||10===p.elementType)&&t.nodalNumbering.quadElements.push(e);b++,b===p.numElements&&(f++,p={numElements:0})}}i++}return t.physicalPropMap.forEach((e=>{if(1===e.dimension){const n=g[e.tag]||[];n.length>0&&t.boundaryConditions.push({name:e.name,tag:e.tag,nodes:n})}})),s(`Parsed boundary node pairs by physical tag: ${JSON.stringify(t.boundaryNodePairs)}. These pairs will be used to identify boundary elements in the mesh.`),t};function te(e,t,n,o,s,i,r="structured"){const{nodesXCoordinates:a,nodesYCoordinates:l}=t;if("1D"===o&&"line"===s){let t;t=e.length>0&&Array.isArray(e[0])?e.map((e=>e[0])):e;let o=Array.from(a),s={x:o,y:t,mode:"lines",type:"scatter",line:{color:"rgb(219, 64, 82)",width:2},name:"Solution"},r=Math.min(window.innerWidth,700),l=Math.max(...o),d=r/l,c={title:`line plot - ${n}`,width:Math.max(d*l,400),height:350,xaxis:{title:"x"},yaxis:{title:"Solution"},margin:{l:70,r:40,t:50,b:50}};Plotly.newPlot(i,[s],c,{responsive:!0})}else if("2D"===o&&"contour"===s){const t="structured"===r,o=new Set(a).size,d=new Set(l).size;let c;c=Array.isArray(e[0])?e.map((e=>e[0])):e;let u=Math.min(window.innerWidth,700),m=Math.max(...a),h=Math.max(...l)/m,f=Math.min(u,600),p={title:`${s} plot - ${n}`,width:f,height:f*h*.8,xaxis:{title:"x"},yaxis:{title:"y"},margin:{l:50,r:50,t:50,b:50},hovermode:"closest"};if(t){const t=o,n=d;math.reshape(Array.from(a),[t,n]);let s=math.reshape(Array.from(l),[t,n]),r=math.reshape(Array.from(e),[t,n]),c=math.transpose(r),u=[];for(let e=0;e<t*n;e+=n){let t=a[e];u.push(t)}let m={z:c,type:"contour",contours:{coloring:"heatmap",showlabels:!1},colorbar:{title:"Solution"},x:u,y:s[0],name:"Solution Field"};Plotly.newPlot(i,[m],p,{responsive:!0})}else{let e={x:a,y:l,z:c,type:"contour",contours:{coloring:"heatmap",showlabels:!1},colorbar:{title:"Solution"},name:"Solution Field"};Plotly.newPlot(i,[e],p,{responsive:!0})}}}class ne{constructor(){this.worker=null,this.feaWorker=null,this.isReady=!1,this._initWorker()}async _initWorker(){try{this.worker=new Worker(new URL("./wrapperScript.js",import.meta.url),{type:"module"}),this.worker.onerror=e=>{console.error("FEAScriptWorker: Worker error:",e)};const e=b(this.worker);this.feaWorker=await new e,this.isReady=!0}catch(e){throw console.error("Failed to initialize worker",e),e}}async _ensureReady(){return this.isReady?Promise.resolve():new Promise(((e,t)=>{let n=0;const o=()=>{n++,this.isReady?e():n>=50?t(new Error("Timeout waiting for worker to be ready")):setTimeout(o,1e3)};o()}))}async setSolverConfig(e){return await this._ensureReady(),i(`FEAScriptWorker: Setting solver config to: ${e}`),this.feaWorker.setSolverConfig(e)}async setMeshConfig(e){return await this._ensureReady(),i("FEAScriptWorker: Setting mesh config"),this.feaWorker.setMeshConfig(e)}async addBoundaryCondition(e,t){return await this._ensureReady(),i(`FEAScriptWorker: Adding boundary condition for boundary: ${e}`),this.feaWorker.addBoundaryCondition(e,t)}async setSolverMethod(e){return await this._ensureReady(),i(`FEAScriptWorker: Setting solver method to: ${e}`),this.feaWorker.setSolverMethod(e)}async solve(){await this._ensureReady(),i("FEAScriptWorker: Requesting solution from worker...");const e=performance.now(),t=await this.feaWorker.solve();return i(`FEAScriptWorker: Solution completed in ${((performance.now()-e)/1e3).toFixed(2)}s`),t}async getModelInfo(){return await this._ensureReady(),this.feaWorker.getModelInfo()}async ping(){return await this._ensureReady(),this.feaWorker.ping()}terminate(){this.worker&&(this.worker.terminate(),this.worker=null,this.feaWorker=null,this.isReady=!1)}}const oe="0.1.4";export{Z as FEAScriptModel,ne as FEAScriptWorker,ee as importGmshQuadTri,o as logSystem,te as plotSolution,oe as printVersion};
//# sourceMappingURL=feascript.esm.js.map
